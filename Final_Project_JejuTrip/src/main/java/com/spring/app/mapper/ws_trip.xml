<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(네임스페이스명은 프로젝트 전체내에서 유일해야 한다!!!!!) ====  절대  ; 쓰지마라 !!!!!!!!!! 
메퍼가 바뀌면 무조건  WAS를 껐다 켜야한다!!!!!!!!! -->
<mapper namespace="ws_trip">

	<insert id="companyRegister" parameterType="com.spring.app.trip.domain.CompanyVO">
		insert into tbl_company (companyid, company_name, pw, email, mobile, registerday, lastpwdchangedate, status, idle) 
		values (#{companyid},#{company_name},#{pw},#{email},#{mobile},default, default, default, default)
	</insert>
	
	<select id="companyIdCheck" parameterType="String" resultType="String">
		select companyid
		from tbl_company
		where companyid = #{companyid}
	</select>
	
	<select id="companyEmailCheck" parameterType="String" resultType="String">
		select companyid
		from tbl_company
		where email = #{email}
	</select>
	
	<insert id="registerHotelEnd" parameterType="com.spring.app.trip.domain.LodgingVO">
		insert into tbl_lodging (lodging_code , local_status, lodging_category, fk_companyid, lodging_name, lodging_tell, lodging_content, lodging_address, main_img, filename, orgfilename, filesize)
                   	   	  values(#{lodging_code},#{local_status},#{lodging_category},#{fk_companyid},#{lodging_name},#{lodging_tell},#{lodging_content},#{lodging_address},#{fileName},#{fileName},#{orgFilename},#{fileSize})
	</insert>
	
	<select id="select_lodgingvo" parameterType="HashMap" resultType="com.spring.app.trip.domain.LodgingVO">
		
		SELECT lodging_code, local_status, lodging_category, fk_companyid, lodging_name, lodging_tell, lodging_content, lodging_address, main_img, filename, orgfilename, filesize, status 
		FROM 
		(
		    SELECT rownum AS RNO
		         , lodging_code, local_status, lodging_category, fk_companyid, lodging_name, lodging_tell, lodging_content, lodging_address, main_img, filename, orgfilename, filesize, status, feedback_msg
		    FROM
		    (
		        select lodging_code, local_status, lodging_category, fk_companyid, lodging_name, lodging_tell, lodging_content, lodging_address, main_img, filename, orgfilename, filesize, status, feedback_msg
		        from tbl_lodging
		        <if test="choice_status != ''">where status = #{choice_status}</if>
		        order by status
		    )V
		) T
		WHERE RNO between #{startRno} and #{endRno}
		
	</select>
	
	<update id="screeningRegisterEnd" parameterType="HashMap">
		update tbl_lodging set status = #{status} 
		<if test="status == 2">
			, feedback_msg = #{feedback_msg}
		</if>
		where lodging_code = #{lodging_code}
	</update>
	
	<select id="getTotalCount" parameterType="String" resultType="Integer">
		select count(*) as totalCount
		from tbl_lodging
		<if test="choice_status != ''">where status = #{choice_status}</if>
	</select>
	
	<!-- 편의시설 체크박스를 만들기 위해 DB에 있는 편의시설 테이블에서 편의시설 종류를 select 해온다. -->
	<resultMap type="HashMap" id="convenient_map">
		<result property="convenient_code" 	column="convenient_code" 	javaType="String" />
		<result property="convenient_name" 	column="convenient_name" 	javaType="String" />
	</resultMap>
	
	<select id="select_convenient" resultMap="convenient_map">
		select convenient_code, convenient_name
		from tbl_convenient
		order by convenient_code asc
	</select>
	
	<select id="getSeq" resultType="String">
		select seq_common.nextval AS seq 
	    from dual
	</select>
	
	<insert id="insert_convenient" parameterType="HashMap">
		insert into tbl_lodging_convenient (fk_convenient_code, fk_lodging_code) values(#{convenient_code},#{seq})
	</insert>
	
	<!-- 등록 신청한 호텔들의 편의시설 정보를 가져와서 view 페이지에 표출시켜주기위한 List select -->
	<resultMap type="HashMap" id="convenient_lodging_map">
		<result property="convenient_name" 	column="convenient_name" 	javaType="String" />
		<result property="lodging_code" 	column="lodging_code" 	javaType="String" />
	</resultMap>
	
	<select id="select_convenient_list" resultMap="convenient_lodging_map">
		SELECT C.convenient_name, D.lodging_code
		FROM tbl_lodging_convenient L JOIN tbl_convenient C
		ON L.fk_convenient_code = C.convenient_code
		JOIN tbl_lodging D
		ON D.lodging_code = fk_lodging_code
	</select>
	
	<!-- 숙소 테이블에서 해당 업체의 신청건수, 승인건수, 반려 건수를 각각 알아온다. -->
	<resultMap type="HashMap" id="count_registerHotel">
		<result property="status" 		column="status" 		javaType="String" />
		<result property="count_status" column="count_status" 	javaType="String" />
	</resultMap>
	
	<select id="select_count_registerHotel" parameterType="String" resultMap="count_registerHotel">
		select status as status, count(status) as count_status
		from tbl_lodging
		where fk_companyid = #{companyid}
		group by status
	</select>
	
	<select id="select_loginCompany_lodgingvo" parameterType="String" resultType="com.spring.app.trip.domain.LodgingVO">
		select lodging_code, local_status, lodging_category, fk_companyid, lodging_name, lodging_tell, lodging_content, lodging_address, main_img, status, feedback_msg
		from tbl_lodging
		where fk_companyid = #{companyid}
		order by lodging_code desc
	</select>
	
	<!-- 업체가 신청한 호텔에 대한 상세 정보를 보여주기위해 DB에서 읽어온다. -->
	<select id="selectRegisterHotelJSON" parameterType="String" resultType="com.spring.app.trip.domain.LodgingVO">
		select lodging_name, lodging_category, local_status, lodging_tell, lodging_content, lodging_address, main_img, status, feedback_msg
		from tbl_lodging
		where lodging_code = #{lodging_code}
	</select>
	
	<select id="select_member_all" resultType="com.spring.app.trip.domain.MemberVO">
		SELECT userid, email, user_name, mobile, address, detail_address, gender, to_char(registerday,'yyyy-mm-dd') as registerday, status, idle
		FROM 
		(
		    SELECT rownum AS RNO
		         , userid, email, user_name, mobile, address, detail_address, gender, registerday, status, idle
		    FROM
		    (
		        select userid, email, user_name, mobile, address, detail_address, gender, registerday, status, idle
		        from tbl_member
		        order by registerday desc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<select id="select_Company_all" resultType="com.spring.app.trip.domain.CompanyVO">
		SELECT companyid, company_name, email, mobile, registerday, status, idle
		FROM 
		(
		    SELECT rownum AS RNO
		         , companyid, company_name, email, mobile, registerday, status, idle
		    FROM
		    (
		        select companyid, company_name, email, mobile, registerday, status, idle
		        from tbl_company
		        order by registerday desc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<select id="getTotalMemberCount" resultType="Integer">
		select count(*) as count
		from tbl_member
	</select>
	
	<select id="getTotalCompanyCount" resultType="Integer">
		select count(*) as count
		from tbl_Company
	</select>
	
	<select id="select_detailMember" parameterType="String" resultType="com.spring.app.trip.domain.MemberVO">
		select userid, email, user_name, mobile, address, detail_address, birthday, gender, registerday, status, idle
		from tbl_member
		where userid = #{userid}
	</select>
	
	<select id="select_detailCompany" parameterType="String" resultType="com.spring.app.trip.domain.CompanyVO">
		select companyid, company_name, email, mobile, registerday, status, idle
		from tbl_company
		where companyid = #{userid}
	</select>
	
	<resultMap type="HashMap" id="CNT_YEAR_REGISTER_MEMBER">
		<result property="line_year" column="line_year" 	javaType="String" />
		<result property="line_CNT" 	column="line_CNT" 	javaType="String" />
	</resultMap>
	
	<select id="get_year_login_member_chart" parameterType="String" resultMap="CNT_YEAR_REGISTER_MEMBER">
		WITH A
		AS (
		select to_char(logindate,'yyyy') as line_year, count(*) as line_CNT
		from tbl_member_loginhistory
		where fk_userid !='admin'
		group by to_char(logindate,'yyyy')
		)
		SELECT A.line_year, A.line_CNT
		FROM A CROSS JOIN (SELECT SUM(line_CNT) AS TOTAL FROM A) B
		order by line_year asc
	</select>
	
	<resultMap type="HashMap" id="CNT_MONTH_REGISTER_MEMBER">
		<result property="line_month" column="line_month" 	javaType="String" />
		<result property="line_CNT" 	column="line_CNT" 	javaType="String" />
	</resultMap>
	
	<select id="get_month_login_member_chart" parameterType="String" resultMap="CNT_MONTH_REGISTER_MEMBER">
		WITH A
		AS (
		select to_char(logindate,'yyyy-mm') as line_month, count(*) as line_CNT
		from tbl_member_loginhistory
		where fk_userid != 'admin' and logindate between to_date(#{choice_year}||'-01-01', 'yyyy-mm-dd') and to_date(#{choice_year}||'-12-31' , 'yyyy-mm-dd')
		group by to_char(logindate,'yyyy-mm')
		)
		SELECT A.line_month, A.line_CNT
		FROM A CROSS JOIN (SELECT SUM(line_CNT) AS TOTAL FROM A) B
		order by line_month asc
	</select>
	
	<resultMap type="HashMap" id="PERCNTAGE_AGE_GROUP">
		<result property="ageGroup" 	column="ageGroup" 	javaType="String" />
		<result property="PERCNTAGE" 	column="PERCNTAGE" 	javaType="String" />
	</resultMap>
	
	<select id="user_age_group_chart" resultMap="PERCNTAGE_AGE_GROUP">
		WITH A AS (
		    SELECT trunc(
		               CASE 
		                   WHEN TO_DATE(EXTRACT(YEAR FROM SYSDATE) || 
		                                SUBSTR(birthday, 6, 2) || 
		                                SUBSTR(birthday, 9, 2), 'yyyy-mm-dd') 
		                        &lt;= TO_DATE(TO_CHAR(SYSDATE, 'yyyy-mm-dd'), 'yyyy-mm-dd') 
		                   THEN EXTRACT(YEAR FROM SYSDATE) - TO_NUMBER(SUBSTR(birthday, 1, 4))
		                   ELSE EXTRACT(YEAR FROM SYSDATE) - TO_NUMBER(SUBSTR(birthday, 1, 4)) - 1
		               END, -1) AS ageGroup,
		           COUNT(*) AS ageGroup_CNT
		    FROM tbl_member
		    WHERE userid != 'admin'
		    GROUP BY trunc(
		               CASE 
		                   WHEN TO_DATE(EXTRACT(YEAR FROM SYSDATE) || 
		                                SUBSTR(birthday, 6, 2) || 
		                                SUBSTR(birthday, 9, 2), 'yyyy-mm-dd') 
		                        &lt;= TO_DATE(TO_CHAR(SYSDATE, 'yyyy-mm-dd'), 'yyyy-mm-dd') 
		                   THEN EXTRACT(YEAR FROM SYSDATE) - TO_NUMBER(SUBSTR(birthday, 1, 4))
		                   ELSE EXTRACT(YEAR FROM SYSDATE) - TO_NUMBER(SUBSTR(birthday, 1, 4)) - 1
		               END, -1)
		),
		B AS (
		    SELECT SUM(ageGroup_CNT) AS TOTAL
		    FROM A
		)
		SELECT A.ageGroup || '대' AS ageGroup, 
		       TO_CHAR(ROUND((A.ageGroup_CNT / B.TOTAL) * 100, 1), '990.0') AS PERCENTAGE
		FROM A, B
		ORDER BY ageGroup ASC
	</select>
	
	<resultMap type="HashMap" id="PERCNTAGE_GENDER">
		<result property="gender" 		column="gender" 	javaType="String" />
		<result property="PERCNTAGE" 	column="PERCNTAGE" 	javaType="String" />
	</resultMap>
	
	<select id="user_gender_chart" resultMap="PERCNTAGE_GENDER">
		WITH A
		AS (
		select gender, count(*) as CNT
		from tbl_member
		where userid != 'admin'
		group by gender
		)
		SELECT A.gender, TO_CHAR( ROUND((A.CNT / B.TOTAL) * 100, 1), '990.0') AS PERCNTAGE
		FROM A CROSS JOIN (SELECT SUM(CNT) AS TOTAL FROM A) B
		order by gender asc
	</select>
	
	<resultMap type="HashMap" id="CNT_YEAR_RESERVATION">
		<result property="reservation_year" column="reservation_year" 	javaType="String" />
		<result property="CNT" 				column="CNT" 	javaType="String" />
	</resultMap>
	
	<select id="get_year_reservation_hotel_chart" parameterType="String" resultMap="CNT_YEAR_RESERVATION">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="lodging_code != null">
			where L.fk_companyid = #{lodging_code}
		</if>
		)
		SELECT to_char(R.check_in,'yyyy') as reservation_year , count(*) as CNT 
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		GROUP BY to_char(R.check_in,'yyyy')
		ORDER BY 1
	</select>
	
	<resultMap type="HashMap" id="CNT_MONTH_RESERVATION">
		<result property="reservation_month" column="reservation_month" 	javaType="String" />
		<result property="CNT" 				column="CNT" 					javaType="String" />
	</resultMap>
	
	<select id="get_month_reservation_chart" parameterType="HashMap" resultMap="CNT_MONTH_RESERVATION">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.check_in,'yyyy-mm') as reservation_month , count(*) as CNT 
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE R.reservation_date between to_date(#{choice_year}||'-01-01' , 'yyyy-mm-dd') and to_date(#{choice_year}||'-12-31' , 'yyyy-mm-dd')
		GROUP BY to_char(R.check_in,'yyyy-mm')
		ORDER BY 1
	</select>
	
	<select id="select_lodging" resultType="com.spring.app.trip.domain.LodgingVO">
		SELECT lodging_code, lodging_name, lodging_tell, lodging_address
		FROM 
		(
		    SELECT rownum AS RNO
		         , lodging_code, lodging_name, lodging_tell, lodging_address
		    FROM
		    (
		        select lodging_code, lodging_name, lodging_tell, lodging_address
		        from tbl_lodging
		        where status = 1
		        order by lodging_name asc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<select id="getTotalLodgingCount" resultType="Integer">
		select count(*)
		from tbl_lodging
		where status = 1
	</select>
	
	<select id="select_foodstore" resultType="com.spring.app.trip.domain.FoodstoreVO">
		SELECT food_store_code, food_name, food_mobile, food_address
		FROM 
		(
		    SELECT rownum AS RNO
		         , food_store_code, food_name, food_mobile, food_address
		    FROM
		    (
		        select food_store_code, food_name, food_mobile, food_address
		        from tbl_food_store
		        order by food_name asc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<select id="getTotalFoodstoreCount" resultType="Integer">
		select count(*)
		from tbl_food_store
	</select>
	
	<select id="select_play" resultType="com.spring.app.trip.domain.PlayVO">
		SELECT play_code, play_name, play_mobile, play_address
		FROM 
		(
		    SELECT rownum AS RNO
		         , play_code, play_name, play_mobile, play_address
		    FROM
		    (
		        select play_code, play_name, play_mobile, play_address
		        from tbl_play
		        order by play_name asc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<select id="getTotalPlayCount" resultType="Integer">
		select count(*)
		from tbl_play
	</select>
	
	<select id="get_choice_month_last_day" parameterType="String" resultType="String">
		SELECT TO_CHAR(
           LAST_DAY(
               TO_DATE(EXTRACT(YEAR FROM SYSDATE) || '-' || 
                       LPAD(#{choice_month}, 2, '0') || '-01', 'yyyy-mm-dd')
           ), 
           'yyyy-mm-dd'
       ) AS choice_month_last_day
		FROM dual
	</select>
	
	<resultMap type="HashMap" id="CNT_DAY_RESERVATION">
		<result property="reservation_day" column="reservation_day" 	javaType="String" />
		<result property="CNT" 				column="CNT" 					javaType="String" />
	</resultMap>
	
	<select id="get_day_reservation_chart" parameterType="HashMap" resultMap="CNT_DAY_RESERVATION">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.check_in,'yyyy-mm-dd') as reservation_day , count(*) as CNT 
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE R.reservation_date between to_date(extract(year from sysdate)||'-'||#{choice_month}||'-01', 'yyyy-mm-dd') and to_date(#{choice_month_last_day} , 'yyyy-mm-dd')
		GROUP BY to_char(R.check_in,'yyyy-mm-dd')
		ORDER BY 1
	</select>
	
	<resultMap type="HashMap" id="profit_year_all">
		<result property="year" 		column="year" 	javaType="String" />
		<result property="all_profit" 	column="all_profit" javaType="String" />
	</resultMap>
	
	<select id="get_year_profit_chart" parameterType="HashMap" resultMap="profit_year_all">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.reservation_date,'yyyy') as year, sum(R.reservation_price) as all_profit
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		GROUP BY to_char(R.reservation_date,'yyyy')
		ORDER BY year
	</select>
	
	<resultMap type="HashMap" id="profit_month_all">
		<result property="year" 	column="year" 	javaType="String" />
		<result property="profit_all" 	column="profit_all" javaType="String" />
	</resultMap>
	
	<select id="get_month_profit_chart" parameterType="HashMap" resultMap="profit_month_all">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.reservation_date,'yyyy-mm') as year, sum(R.reservation_price) as profit_all
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE R.reservation_date between to_date(#{choice_year}||'-01-01', 'yyyy-mm-dd') and to_date(#{choice_year}||'-12-31', 'yyyy-mm-dd')
		GROUP BY to_char(R.reservation_date,'yyyy-mm')
		ORDER BY year
	</select>
	
	<resultMap type="HashMap" id="profit_day">
		<result property="day" 	column="day" 	javaType="String" />
		<result property="profit" 	column="profit" javaType="String" />
	</resultMap>
	
	<select id="get_day_profit_chart" parameterType="HashMap" resultMap="profit_day">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.reservation_date,'yyyy-mm-dd') as day, sum(R.reservation_price) as profit
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE R.reservation_date between to_date(extract(year from sysdate)||'-'||#{choice_month}||'-01', 'yyyy-mm-dd') and to_date(#{choice_month_last_day}, 'yyyy-mm-dd')
		GROUP BY to_char(R.reservation_date,'yyyy-mm-dd')
		ORDER BY day
	</select>
	
	<resultMap type="HashMap" id="reservation_map">
		<result property="lodging_name" 	column="lodging_name" 	javaType="String" />
		<result property="user_name" 		column="user_name" javaType="String" />
		<result property="room_detail_code" column="room_detail_code" javaType="String" />
		<result property="check_in" 		column="check_in" javaType="String" />
		<result property="check_out" 		column="check_out" javaType="String" />
		<result property="room_stock" 		column="room_stock" javaType="String" />
		<result property="status" 			column="status" javaType="String" />
		<result property="reservation_code" column="reservation_code" javaType="String" />
		<result property="room_name" column="room_name" javaType="String" />
	</resultMap>
	
	<select id="select_company_all_Reservation" parameterType="String" resultMap="reservation_map">
		select L.lodging_name, M.user_name, R.room_detail_code, to_char(V.check_in,'yyyy-mm-dd') as check_in, to_char(V.check_out,'yyyy-mm-dd') as check_out, R.room_stock, V.status, V.reservation_code, R.room_name
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = R.fk_lodging_code
		JOIN tbl_reservation V
		ON R.room_detail_code = V.fk_room_detail_code
		JOIN tbl_member M
		ON V.fk_userid = M.userid
		where fk_companyid = #{companyid}
		order by to_number(V.reservation_code) desc
	</select>
	
	<select id="select_reservation_Count" parameterType="HashMap" resultType="String">
		
		select to_char(count(*)) as count
		from tbl_reservation
		where status = 1 and fk_room_detail_code = #{room_detail_code} and check_in &gt;= to_date(#{check_in}, 'yyyy-mm-dd') and check_out &lt;= to_date(#{check_out} , 'yyyy-mm-dd')
		
	</select>
	
	<resultMap type="HashMap" id="profit_year_success">
		<result property="year" 			column="year" 	javaType="String" />
		<result property="success_profit" 	column="success_profit" javaType="String" />
	</resultMap>
	
	<select id="get_year_profit_chart_success" parameterType="HashMap" resultMap="profit_year_success">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.reservation_date,'yyyy') as year, sum(R.reservation_price) as success_profit
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE status = 1
		GROUP BY to_char(R.reservation_date,'yyyy')
		ORDER BY year
	</select>
	
	<resultMap type="HashMap" id="profit_year_fail">
		<result property="year" 			column="year" 	javaType="String" />
		<result property="fail_profit" 	column="fail_profit" javaType="String" />
	</resultMap>
	
	<select id="get_year_profit_chart_fail" parameterType="HashMap" resultMap="profit_year_fail">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.reservation_date,'yyyy') as year, sum(R.reservation_price) as fail_profit
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE status = 2
		GROUP BY to_char(R.reservation_date,'yyyy')
		ORDER BY year
	</select>
	
	<resultMap type="HashMap" id="profit_month_success">
		<result property="year" 			column="year" 	javaType="String" />
		<result property="profit_success" 	column="profit_success" javaType="String" />
	</resultMap>
	
	<select id="get_month_profit_chart_succeess" parameterType="HashMap" resultMap="profit_month_success">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.reservation_date,'yyyy-mm') as year, sum(R.reservation_price) as profit_success
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE R.status = 1 and R.reservation_date between to_date(#{choice_year}||'-01-01' , 'yyyy-mm-dd') and to_date(#{choice_year}||'-12-31' , 'yyyy-mm-dd')
		GROUP BY to_char(R.reservation_date,'yyyy-mm')
		ORDER BY year
	</select>
	
	<resultMap type="HashMap" id="profit_month_fail">
		<result property="year" 		column="year" 	javaType="String" />
		<result property="profit_fail" 	column="profit_fail" javaType="String" />
	</resultMap>
	
	<select id="get_month_profit_chart_fail" parameterType="HashMap" resultMap="profit_month_fail">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.reservation_date,'yyyy-mm') as year, sum(R.reservation_price) as profit_fail
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE R.status = 2 and R.reservation_date between to_date(#{choice_year}||'-01-01', 'yyyy-mm-dd') and to_date(#{choice_year}||'-12-31', 'yyyy-mm-dd')
		GROUP BY to_char(R.reservation_date,'yyyy-mm')
		ORDER BY year
	</select>
	
	<resultMap type="HashMap" id="profit_day_success">
		<result property="day" 				column="day" 	javaType="String" />
		<result property="profit_success" 	column="profit_success" javaType="String" />
	</resultMap>
	
	<select id="get_day_profit_chart_success" parameterType="HashMap" resultMap="profit_day_success">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.reservation_date,'yyyy-mm-dd') as day, sum(R.reservation_price) as profit_success
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE R.status = 1 and R.reservation_date between to_date(extract(year from sysdate)||'-'||#{choice_month}||'-01', 'yyyy-mm-dd') and to_date(#{choice_month_last_day} , 'yyyy-mm-dd')
		GROUP BY to_char(R.reservation_date,'yyyy-mm-dd')
		ORDER BY day
	</select>
	
	<resultMap type="HashMap" id="profit_day_fail">
		<result property="day" 				column="day" 	javaType="String" />
		<result property="profit_fail" 		column="profit_fail" javaType="String" />
	</resultMap>
	
	<select id="get_day_profit_chart_fail" parameterType="HashMap" resultMap="profit_day_fail">
		WITH A
		AS (
		select R.room_detail_code
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = r.fk_lodging_code
		<if test="companyid != null">
			where L.fk_companyid = #{companyid}
		</if>
		)
		SELECT to_char(R.reservation_date,'yyyy-mm-dd') as day, sum(R.reservation_price) as profit_fail
		FROM A JOIN tbl_reservation R
		ON A.room_detail_code = R.fk_room_detail_code
		WHERE R.status = 2 and R.reservation_date between to_date(extract(year from sysdate)||'-'||#{choice_month}||'-01','yyyy-mm-dd') and to_date(#{choice_month_last_day} , 'yyyy-mm-dd')
		GROUP BY to_char(R.reservation_date,'yyyy-mm-dd')
		ORDER BY day
	</select>
	
	<select id="getTotalreservationCount" parameterType="HashMap" resultType="Integer">
		select count(*) as count
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = R.fk_lodging_code
		JOIN tbl_reservation V
		ON R.room_detail_code = V.fk_room_detail_code
		JOIN tbl_member M
		ON V.fk_userid = M.userid
		where fk_companyid = #{companyid}
		<if test="status != null">
			and V.status = #{status}
		</if>
		order by to_number(V.reservation_code) desc
	</select>
	
	<resultMap type="HashMap" id="reservation_map_paging">
		<result property="lodging_name" 	column="lodging_name" 	javaType="String" />
		<result property="user_name" 		column="user_name" javaType="String" />
		<result property="room_detail_code" column="room_detail_code" javaType="String" />
		<result property="check_in" 		column="check_in" javaType="String" />
		<result property="check_out" 		column="check_out" javaType="String" />
		<result property="room_stock" 		column="room_stock" javaType="String" />
		<result property="status" 			column="status" javaType="String" />
		<result property="reservation_code" column="reservation_code" javaType="String" />
		<result property="room_name" column="room_name" javaType="String" />
	</resultMap>
	
	<select id="select_company_all_Reservation_paging" parameterType="String" resultMap="reservation_map_paging">
		SELECT lodging_name, user_name, room_detail_code, check_in, check_out, room_stock, status, reservation_code, room_name
		FROM 
		(
		    SELECT rownum AS RNO
		         ,lodging_name, user_name, room_detail_code, check_in, check_out, room_stock, status, reservation_code, room_name
		    FROM
		    (
		        select L.lodging_name, M.user_name, R.room_detail_code, to_char(V.check_in,'yyyy-mm-dd') as check_in, to_char(V.check_out,'yyyy-mm-dd') as check_out, R.room_stock, V.status, V.reservation_code, R.room_name
				from tbl_lodging L JOIN tbl_room_detail R
				on L.lodging_code = R.fk_lodging_code
				JOIN tbl_reservation V
				ON R.room_detail_code = V.fk_room_detail_code
				JOIN tbl_member M
				ON V.fk_userid = M.userid
				<if test="companyid != null">
					where L.fk_companyid = #{companyid}
					<if test="status != null">
						and V.status = #{status}
					</if>
				</if>
				order by to_number(V.reservation_code) desc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<update id="updateReservationStatus" parameterType="HashMap">
		update tbl_reservation set status = #{status} where reservation_code = #{reservation_code}
	</update>
	
	<select id="select_user_all_reservation" parameterType="String" resultType="String">
		select status
		from tbl_reservation
		where fk_userid = #{userid}
	</select>
	
	<resultMap type="HashMap" id="user_reservation_map_paging">
		<result property="lodging_name" 	column="lodging_name" 	javaType="String" />
		<result property="user_name" 		column="user_name" javaType="String" />
		<result property="room_detail_code" column="room_detail_code" javaType="String" />
		<result property="check_in" 		column="check_in" javaType="String" />
		<result property="check_out" 		column="check_out" javaType="String" />
		<result property="room_stock" 		column="room_stock" javaType="String" />
		<result property="status" 			column="status" javaType="String" />
		<result property="reservation_code" column="reservation_code" javaType="String" />
		<result property="room_name" column="room_name" javaType="String" />
	</resultMap>
	
	<select id="select_user_all_Reservation_paging" parameterType="String" resultMap="user_reservation_map_paging">
		SELECT lodging_name, user_name, room_detail_code, check_in, check_out, room_stock, status, reservation_code, room_name
		FROM 
		(
		    SELECT rownum AS RNO
		         ,lodging_name, user_name, room_detail_code, check_in, check_out, room_stock, status, reservation_code, room_name
		    FROM
		    (
		        select L.lodging_name, M.user_name, R.room_detail_code, to_char(V.check_in,'yyyy-mm-dd') as check_in, to_char(V.check_out,'yyyy-mm-dd') as check_out, R.room_stock, V.status, V.reservation_code, R.room_name
				from tbl_lodging L JOIN tbl_room_detail R
				on L.lodging_code = R.fk_lodging_code
				JOIN tbl_reservation V
				ON R.room_detail_code = V.fk_room_detail_code
				JOIN tbl_member M
				ON V.fk_userid = M.userid
				<if test="userid != null">
					where V.fk_userid = #{userid}
					<if test="status != null">
						and V.status = #{status}
					</if>
				</if>
				order by V.reservation_date desc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<select id="getTotalUserReservationCount" parameterType="HashMap" resultType="Integer">
		select count(*) as count
		from tbl_lodging L JOIN tbl_room_detail R
		on L.lodging_code = R.fk_lodging_code
		JOIN tbl_reservation V
		ON R.room_detail_code = V.fk_room_detail_code
		JOIN tbl_member M
		ON V.fk_userid = M.userid
		where V.fk_userid = #{userid}
		<if test="status != null">
			and V.status = #{status}
		</if>
	</select>
	
	<select id="get_user_email" parameterType="String" resultType="String">
		select M.email
		from tbl_reservation R JOIN tbl_member M
		ON R.fk_userid = M.userid
		where reservation_code = #{reservation_code}
	</select>
	
	<resultMap type="HashMap" id="send_email_map">
		<result property="room_name" 			column="room_name" 	javaType="String" />
		<result property="room_img" 			column="room_img" javaType="String" />
		<result property="check_in" 			column="check_in" javaType="String" />
		<result property="check_out" 			column="check_out" javaType="String" />
		<result property="reservation_price" 	column="reservation_price" javaType="String" />
		<result property="reservation_code" 	column="reservation_code" javaType="String" />
		<result property="lodging_name" 		column="lodging_name" javaType="String" />
		<result property="lodging_tell" 		column="lodging_tell" javaType="String" />
		<result property="lodging_address" 		column="lodging_address" javaType="String" />
		<result property="user_name" 			column="user_name" javaType="String" />
	</resultMap>
	
	<select id="get_email_map" parameterType="String" resultMap="send_email_map">
		select D.room_name, D.room_img, R.check_in||' '||D.check_in as check_in, R.check_out||' '||D.check_out as check_out ,R.reservation_price, R.reservation_code, L.lodging_name, L.lodging_tell, L.lodging_address, M.user_name
		from tbl_reservation R JOIN tbl_room_detail D
		on R.fk_room_detail_code = D.room_detail_code
		JOIN tbl_lodging L
		on D.fk_lodging_code = L.lodging_code
		JOIN tbl_member M
		on R.fk_userid = M.userid 
		where R.reservation_code = #{reservation_code}
	</select>
	
	<select id="userEmailDuplicateCheckEdit" parameterType="HashMap" resultType="String">
		select email
		from tbl_member
		where email = #{email} and userid != #{userid}
	</select>
	
	<update id="update_member_info" parameterType="com.spring.app.trip.domain.MemberVO">
		update tbl_member set email = #{email} , user_name = #{user_name} , mobile = #{mobile} , address = #{address} , detail_address = #{detail_address} , birthday = #{birthday} where userid = #{userid}
	</update>
	
	<!-- 등록된 일정에 대한 정보(달력에 표시됨)-->
	<select id="selectSchedule" resultType="Calendar_schedule_VO" parameterType="String">
		select scheduleno, startdate, enddate, subject, color, place, joinuser, content, fk_smcatgono, fk_lgcatgono, fk_userid 
		from tbl_calendar_schedule
		where fk_userid = #{fk_userid} OR
		fk_lgcatgono = 2 OR
		(fk_lgcatgono != 2 AND lower(joinuser) like '%'|| lower(#{fk_userid}) ||'%')
		order by scheduleno asc
	</select>
	
	<!-- 일정 상세 보기 -->
	<resultMap type="HashMap" id="detailSchedule_Map">
		<result property="SCHEDULENO" 	column="scheduleno" 	javaType="String" />
		<result property="STARTDATE" 	column="startdate" 		javaType="String" />
		<result property="ENDDATE" 		column="enddate" 		javaType="String" />
		<result property="SUBJECT" 		column="subject" 		javaType="String" />
		<result property="COLOR" 		column="color" 			javaType="String" />
		<result property="PLACE" 		column="place" 			javaType="String" />
		<result property="JOINUSER" 	column="joinuser" 		javaType="String" />
		<result property="CONTENT" 		column="content" 		javaType="String" />
		<result property="FK_SMCATGONO" column="fk_smcatgono" 	javaType="String" />
		<result property="FK_LGCATGONO" column="fk_lgcatgono" 	javaType="String" />
		<result property="FK_USERID" 	column="fk_userid" 		javaType="String" />
		<result property="NAME" 		column="user_name" 			javaType="String" />
		<result property="SMCATGONAME" 	column="smcatgoname" 	javaType="String" />
		<result property="SCHEDULE_DIVISON" 	column="SCHEDULE_DIVISON" 	javaType="String" />
	</resultMap>
	<select id="detailSchedule" parameterType="String" resultMap="detailSchedule_Map">
		select SD.scheduleno
		     , to_char(SD.startdate,'yyyy-mm-dd hh24:mi') as startdate
		     , to_char(SD.enddate,'yyyy-mm-dd hh24:mi') as enddate  
		     , SD.subject
		     , SD.color
		     , nvl(SD.place,'-') as place
		     , nvl(SD.joinuser,'공유자가 없습니다.') as joinuser
		     , nvl(SD.content,'') as content
		     , SD.fk_smcatgono
		     , SD.fk_lgcatgono
		     , SD.fk_userid
		     , M.user_name
		     , SC.smcatgoname
		from tbl_calendar_schedule SD 
		JOIN tbl_member M
		ON SD.fk_userid = M.userid
		JOIN tbl_calendar_small_category SC
		ON SD.fk_smcatgono = SC.smcatgono
		where SD.scheduleno = #{scheduleno}
	</select>
	
	<!-- 내 캘린더에서 내캘린더 소분류  보여주기  com.spring.app.schedule.domain. -->
	<select id="showMyCalendar" resultType="Calendar_small_category_VO">
		select smcatgono, fk_lgcatgono, smcatgoname
		from tbl_calendar_small_category
		where fk_lgcatgono = 1
		order by smcatgono asc
	</select>
	
	<!-- 총 일정 검색 건수(totalCount) -->
	<select id="getTotalScheduleCount" parameterType="HashMap" resultType="int">
		select count(*) 
		from tbl_calendar_schedule
		where ( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
		and   ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) 
		
		<if test='fk_lgcatgono == "" and searchWord == "" and searchType == "" '>  <!-- 모든캘린더이고 검색대상이 없을 경우 -->
		    and ( fk_lgcatgono = 2 OR fk_userid = #{fk_userid} OR 
		          ( fk_userid != #{fk_userid} and lower(joinuser) like '%'||lower(#{fk_userid})||'%' ) ) <!-- 사내캘린더 와 자신이 작성한 내캘린더 와 공유받은 캘린더만 조회되도록 한다. -->
		</if>
		
		<if test='fk_lgcatgono == "1" and searchWord == "" and searchType eq "" '>  <!-- 내캘린더이고 검색대상이 없을 경우 -->
		    and ( fk_lgcatgono = 1 AND fk_userid = #{fk_userid} )                                        <!-- 내캘린더만 조회되도록 한다. -->
		</if>
			
		<if test='searchWord != "" and searchType eq "joinuser" '>  <!-- 검색대상을 공유자로 검색할 경우 -->
			and fk_lgcatgono = 1                                    <!-- 내캘린더 -->
			and fk_userid = #{fk_userid}                            <!-- 로그인한 사용자가 작성한 것을 다른 사용자에게 공유 한것 -->
			and lower(joinuser) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
		</if>
		
		<if test='searchWord != "" and searchType neq "" and searchType neq "joinuser" '>  <!-- 검색대상을 공유자가 아닌 다른 것으로 검색할 경우 -->
			and lower(${searchType}) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
			<choose>
				<when test='fk_lgcatgono == "1" '>                       <!-- 내캘린더내에서만 검색할 경우  -->
					and fk_lgcatgono = 1 
					and fk_userid = #{fk_userid}                         <!-- 로그인한 사용자가 작성한 것 -->
				</when>
				
				<when test='fk_lgcatgono == "2" '>                       <!-- 사내캘린더내에서만 검색할 경우  -->
					and fk_lgcatgono = 2 
				</when>
			</choose>			
		</if>
	</select>
	
	<!-- 페이징 처리한 캘린더 가져오기(검색어가 없다라도 날짜범위 검색은 항시 포함된 것임) -->
	<resultMap type="HashMap" id="scheduleListSearchWithPaging_Map">
		<result property="SCHEDULENO" 	column="scheduleno" 	javaType="String" />
		<result property="STARTDATE" 	column="startdate" 		javaType="String" />
		<result property="ENDDATE" 		column="enddate" 		javaType="String" />
		<result property="SMCATGONAME" 	column="smcatgoname" 	javaType="String" />
		<result property="LGCATGONAME" 	column="lgcatgoname" 	javaType="String" />
		<result property="USER_NAME" 	column="user_name" 			javaType="String" />
		<result property="SUBJECT" 		column="subject" 		javaType="String" />
		<result property="CONTENT" 		column="content" 		javaType="String" />
	</resultMap>
	<select id="scheduleListSearchWithPaging" parameterType="HashMap" resultMap="scheduleListSearchWithPaging_Map">  
		select scheduleno 
		     , startdate, enddate
		     , smcatgoname, lgcatgoname, user_name
		     , subject, content 
		from 
		(
			select  row_number() over(order by SD.scheduleno desc) as rno 
			      , SD.scheduleno
			      , to_char(SD.startdate, 'yyyy-mm-dd hh24:mi') as startdate
			      , to_char(SD.enddate, 'yyyy-mm-dd hh24:mi') as enddate
			      , SC.smcatgoname, LC.lgcatgoname, M.user_name 
			      , SD.subject, SD.content 
			from tbl_calendar_schedule SD 
			JOIN tbl_member M 
			ON SD.fk_userid = M.userid
			JOIN tbl_calendar_small_category SC 
			ON SD.fk_smcatgono = SC.smcatgono
			JOIN tbl_calendar_large_category LC 
			ON SD.fk_lgcatgono = LC.lgcatgono 
			
			where ( to_char(SD.startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
			AND   ( to_char(SD.enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) 
			
			<if test='fk_lgcatgono == "" and searchWord == "" and searchType == "" '>  <!-- 모든캘린더이고 검색대상이 없을 경우 -->
			    and ( SD.fk_lgcatgono = 2 OR SD.fk_userid = #{fk_userid} OR
			          ( SD.fk_userid != #{fk_userid} and lower(SD.joinuser) like '%'||lower(#{fk_userid})||'%' ) )  <!-- 사내캘린더 와 자신이 작성한 내캘린더 와 공유받은 캘린더만 조회되도록 한다. -->
			</if>
			
			<if test='fk_lgcatgono == "1" and searchWord == "" and searchType eq "" '>  <!-- 내캘린더이고 검색대상이 없을 경우 -->
			    and ( SD.fk_lgcatgono = 1 AND SD.fk_userid = #{fk_userid} )                                     <!-- 내캘린더만 조회되도록 한다. -->
			</if>
			
			<if test='searchWord != "" and searchType eq "joinuser" '>     <!-- 검색대상을 공유자로 검색할 경우 -->
				and SD.fk_lgcatgono = 1                                    <!-- 내캘린더 -->
				and SD.fk_userid = #{fk_userid}                            <!-- 로그인한 사용자가 작성한 것을 다른 사용자에게 공유 한것 -->
				and lower(SD.joinuser) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
			</if>
			
			<if test='searchWord != "" and searchType neq "" and searchType neq "joinuser" '>   <!-- 검색대상을 공유자가 아닌 다른 것으로 검색할 경우 -->
				and lower(${searchType}) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
				<choose>
					<when test='fk_lgcatgono == "1" '>                       <!-- 내캘린더내에서만 검색할 경우  -->
						and SD.fk_lgcatgono = 1 
						and SD.fk_userid = #{fk_userid}                      <!-- 로그인한 사용자가 작성한 것 -->
					</when>
					
					<when test='fk_lgcatgono == "2" '>                       <!-- 사내캘린더내에서만 검색할 경우  -->
						and SD.fk_lgcatgono = 2 
					</when>
				</choose>			
			</if>
		) V 
		where V.rno between #{startRno} and #{endRno}
	</select>
	
	<!-- 일정 등록하기 -->
    <insert id="registerSchedule_end" parameterType="HashMap">
    	insert into tbl_calendar_schedule(scheduleno, startdate, enddate, subject, color, place, joinuser, content, fk_smcatgono, fk_lgcatgono, fk_userid) 
    	values(seq_scheduleno.nextval, to_date(#{startdate}, 'yyyymmddhh24miss'), to_date(#{enddate}, 'yyyymmddhh24miss'), #{subject}, #{color}, #{place}, #{joinuser}, #{content}, #{fk_smcatgono}, 1, #{fk_userid})  
    </insert>
	
	<!-- 공유자를 찾기 위한 특정글자가 들어간 회원명단 불러오기 -->
    <select id="searchJoinUserList" parameterType="HashMap" resultType="MemberVO">
    	select userid, user_name
		from tbl_member
		where lower(user_name) like '%'|| lower(#{joinUserName}) ||'%' and userid != #{userid}
    </select>
    
    <!-- 일정수정하가 -->
	<update id="editSchedule_end" parameterType="Calendar_schedule_VO">
		update tbl_calendar_schedule set startdate = to_date(#{startdate}, 'yyyymmddhh24miss')
		                               , enddate = to_date(#{enddate}, 'yyyymmddhh24miss')
		                               , subject = #{subject}
		                               , fk_lgcatgono = 1
		                               , fk_smcatgono = #{fk_smcatgono}
		                               , color = #{color}
		                               , place = #{place}
		                               , joinuser = #{joinuser}
		                               , content = #{content}
		where scheduleno = #{scheduleno} 
	</update>
    
    <!-- 일정삭제하기 -->
	<delete id="deleteSchedule" parameterType="String">
		delete from tbl_calendar_schedule 
		where scheduleno = #{scheduleno} 
	</delete>
	
    <!-- 예약 코드를 가지고 업체아이디와 업체명을 가져오기 -->
    <resultMap type="HashMap" id="CompanyIdAndLodgingName">
		<result property="companyid" 	column="companyid" 		javaType="String" />
		<result property="lodging_name" column="lodging_name" 	javaType="String" />
	</resultMap>
    <select id="getCompanyIdAndLodgingNameToTblReservationCode" parameterType="String" resultMap="CompanyIdAndLodgingName">
	    select C.companyid, L.lodging_name
		from tbl_reservation R join tbl_room_detail D
		on R.fk_room_detail_code = D.room_detail_code
		join tbl_lodging L
		on L.lodging_code = D.fk_lodging_code
		join tbl_company C
		on C.companyid = L.fk_companyid
		where R.reservation_code = #{reservation_code}
    </select>
    
    <!-- 해당 예약에 관련된 companyid를 가져와야한다. -->
    <select id="getCompanyidToTblReservation" parameterType="String" resultType="String">
    	select fk_companyid
		from tbl_reservation R join tbl_room_detail D
		on R.fk_room_detail_code = D.room_detail_code
		join tbl_lodging L
		on L.lodging_code = D.fk_lodging_code
		where R.reservation_code = #{reservation_code}
    </select>
    
    <!-- 채팅을 보냈다는 기록을 남겨준다. -->
    <insert id="insert_send_chatting" parameterType="HashMap">
    	insert into tbl_chattinglog (to_id, from_id, status, fk_reservation_code) values(#{to_id},#{from_id},0,#{fk_reservation_code})
    </insert>
    
    <update id="update_chattinglog_no_read" parameterType="HashMap">
    	update tbl_chattinglog set status = 0, chatting_date = sysdate where to_id = #{to_id} and from_id = #{from_id} and fk_reservation_code = #{fk_reservation_code}
    </update>
    
    <!-- 로그인을 하고 메인에 들어갔을 때 새로 온 채팅이 있는지 확인해준다. -->
    <select id="get_new_chatting" parameterType="String" resultType="Integer">
    	select count(*) as i
		from tbl_chattinglog
		where to_id = #{userid} and status = 0 and fk_reservation_code > 0
    </select>
    <!-- 로그인을 했을 때 모든 채팅의 개수를 읽어온다. -->
    <select id="get_all_chatting" parameterType="String" resultType="Integer">
    	select count(*) as i
		from tbl_chattinglog
		where to_id = #{userid} and fk_reservation_code > 0
    </select>
    
    <!-- 새로 온 관리자 메세지가 있는지 확인한다. -->
    <select id="get_from_admin_chatting_exist" parameterType="String" resultType="Integer">
    	select count(*) as i
    	from tbl_chattinglog
    	where to_id = #{userid} and fk_reservation_code = '0' and status = 0
    </select>
    
    <!-- 로그인을 하고 메인에 들어갔을 때 새로 온 채팅이 있는지 확인해준다. -->
    <select id="get_new_chatting_admin" parameterType="String" resultType="Integer">
    	select count(*) as i
		from tbl_chattinglog
		where to_id = #{userid} and status = 0
    </select>
    <!-- 로그인을 했을 때 모든 채팅의 개수를 읽어온다. -->
    <select id="get_all_chatting_admin" parameterType="String" resultType="Integer">
    	select count(*) as i
		from tbl_chattinglog
		where to_id = #{userid}
    </select>
    
    <!-- 기업으로 온 모든 채팅 목록을 읽어온다. -->
    <resultMap type="HashMap" id="company_chatting_map_paging">
		<result property="fk_reservation_code" 	column="fk_reservation_code" 	javaType="String" />
		<result property="lodging_name" 		column="lodging_name" javaType="String" />
		<result property="room_name" 			column="room_name" javaType="String" />
		<result property="user_name" 			column="user_name" javaType="String" />
		<result property="chatting_date" 		column="chatting_date" javaType="String" />
		<result property="status" 				column="status" javaType="String" />
	</resultMap>
	
	<select id="select_company_all_chatting_paging" parameterType="String" resultMap="company_chatting_map_paging">
		SELECT fk_reservation_code, lodging_name, room_name, user_name, chatting_date, status
		FROM 
		(
		    SELECT rownum AS RNO
		         ,fk_reservation_code, lodging_name, room_name, user_name, chatting_date, status
		    FROM
		    (
		        select distinct C.fk_reservation_code, L.lodging_name, room_name, M.user_name, to_char(chatting_date,'yyyy-mm-dd') as chatting_date, C.status
		        from tbl_chattinglog C join tbl_reservation R
		        on C.fk_reservation_code = R.reservation_code
		        join tbl_room_detail D
		        on R.fk_room_detail_code = D.room_detail_code
		        join tbl_lodging L
		        on D.fk_lodging_code = L.lodging_code
		        join tbl_member M
		        on C.from_id = M.userid
		        where to_id = #{companyid}
		        <if test="status != null">
		        	and C.status = #{status}
		        </if>
		        order by chatting_date desc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<select id="getTotalCompanyChattingCount" resultType="Integer">
		SELECT count(*) as cnt
		FROM 
		(
		select count(*) as cnt
		from tbl_chattinglog
		where to_id = #{companyid}
		group by fk_reservation_code
		)
	</select>
	
	<!-- 채팅에 해당하는 고객 아이디와 이름을 가져온다. -->
	<resultMap type="HashMap" id="reservation_get_userid_name_map">
		<result property="userid" 		column="userid" 	javaType="String" />
		<result property="user_name" 	column="user_name" javaType="String" />
		<result property="lodging_name" column="lodging_name" javaType="String" />
	</resultMap>
	<select id="getMemberIdAndNameToTblReservationCode" resultMap="reservation_get_userid_name_map" parameterType="String">
		select M.userid, M.user_name, L.lodging_name
		from tbl_reservation R join tbl_member M
		on R.fk_userid = M.userid
		join tbl_room_detail D
		on R.fk_room_Detail_code = D.room_detail_code
		join tbl_lodging L
		on D.fk_lodging_code = L.lodging_code
		where reservation_code = #{reservation_code}
	</select>
	
	<!-- 채팅 로그 테이블에 해당 예약건에 관련한 채팅을 읽음처리한다. -->
	<update id="update_chattinglog" parameterType="String">
		update tbl_chattinglog set status = 1 where fk_reservation_code = #{reservation_code}
	</update>
	
	<!-- 채팅방에서 나가게되면 채팅 기록방에서 나가기 직전까지의 읽음 컬럼을 읽음처리로 바꿔준다. -->
	<update id="update_chattinglog_after_chatting" parameterType="HashMap">
		
		update tbl_chattinglog set status = 1 where fk_reservation_code = #{fk_reservation_code} and to_id = #{to_id} and chatting_date &lt; sysdate
		
	</update>
	
	<!-- 기업으로 온 모든 채팅 목록을 읽어온다. -->
    <resultMap type="HashMap" id="member_chatting_map_paging">
		<result property="fk_reservation_code" 	column="fk_reservation_code" 	javaType="String" />
		<result property="lodging_name" 		column="lodging_name" javaType="String" />
		<result property="room_name" 			column="room_name" javaType="String" />
		<result property="user_name" 			column="user_name" javaType="String" />
		<result property="chatting_date" 		column="chatting_date" javaType="String" />
		<result property="status" 				column="status" javaType="String" />
	</resultMap>
	
	<select id="select_member_all_chatting_paging" parameterType="String" resultMap="member_chatting_map_paging">
		SELECT fk_reservation_code, lodging_name, room_name, user_name, chatting_date, status
		FROM 
		(
		    SELECT rownum AS RNO
		         ,fk_reservation_code, lodging_name, room_name, user_name, chatting_date, status
		    FROM
		    (
		        select distinct C.fk_reservation_code, L.lodging_name, room_name, M.user_name, to_char(chatting_date,'yyyy-mm-dd') as chatting_date, C.status
		        from tbl_chattinglog C join tbl_reservation R
		        on C.fk_reservation_code = R.reservation_code
		        join tbl_room_detail D
		        on R.fk_room_detail_code = D.room_detail_code
		        join tbl_lodging L
		        on D.fk_lodging_code = L.lodging_code
		        join tbl_member M
		        on C.to_id = M.userid
		        where to_id = #{userid}
		        <if test="status != null">
		        	and C.status = #{status}
		        </if>
		        order by chatting_date desc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<select id="getTotalMemberChattingCount" resultType="Integer">
		SELECT count(*) as cnt
		FROM 
		(
		select count(*) as cnt
		from tbl_chattinglog
		where to_id = #{userid}
		group by fk_reservation_code
		)
	</select>
	<!-- 동일한 사람과 진행한 채팅기록이 남아있는지 확인하기위함이다. -->
	<select id="get_chatting_log" parameterType="HashMap" resultType="Integer">
		select count(*) as cnt
		from tbl_chattinglog
		where to_id = #{to_id} and from_id = #{from_id} and fk_reservation_code = #{fk_reservation_code}
	</select>
	
	<!-- 기업으로 온 모든 채팅 목록을 읽어온다. -->
    <resultMap type="HashMap" id="admin_chatting_map_paging">
		<result property="user_name" 		column="user_name" 	javaType="String" />
		<result property="chatting_date" 	column="chatting_date" javaType="String" />
		<result property="status" 			column="status" javaType="String" />
		<result property="from_id" 			column="from_id" javaType="String" />
	</resultMap>
	
	<select id="select_admin_all_chatting_paging" parameterType="String" resultMap="admin_chatting_map_paging">
		SELECT user_name, chatting_date, status,from_id
		FROM 
		(
		    SELECT rownum AS RNO
		         ,user_name, chatting_date, status,from_id
		    FROM
		    (
		        select distinct C.from_id, M.user_name, to_char(chatting_date,'yyyy-mm-dd') as chatting_date, C.status
				from tbl_chattinglog C 
				join tbl_member M
				on C.from_id = M.userid
				where C.to_id = #{userid}
		        <if test="status != null">
		        	and C.status = #{status}
		        </if>
		        order by chatting_date desc
		    )V
		) T
		where RNO between #{startRno} and #{endRno}
	</select>
	
	<select id="getTotalAdminChattingCount" resultType="Integer">
		SELECT count(*) as cnt
		FROM 
		(
		select count(*) as cnt
		from tbl_chattinglog
		where to_id = #{userid}
		group by fk_reservation_code
		)
	</select>
	
	<!-- 유저 아이디로 이름 가져오기 -->
	<select id="getUserName" parameterType="String" resultType="String">
		select user_name
		from tbl_member
		where userid = #{userid}
	</select>
	
	<!-- 메인에 표시해줄 3개의 호텔을 랜덤으로 가져온다. -->
	<resultMap type="HashMap" id="rand_hotel">
		<result property="lodging_code" column="lodging_code" 	javaType="String" />
		<result property="main_img" 	column="main_img" javaType="String" />
	</resultMap>
	
	<select id="get_rand_hotel_list" resultMap="rand_hotel">
		
		select lodging_code, main_img
		from
		(
		    select lodging_code, main_img
		    from tbl_lodging
		    where lodging_category = '호텔'
		    order by DBMS_RANDOM.RANDOM
		)
		where rownum &lt; 4
		 
	</select>
	
	<!-- 메인에 표시해줄 3개의 리조트를 랜덤으로 가져온다. -->
	<resultMap type="HashMap" id="rand_resort">
		<result property="lodging_code" column="lodging_code" 	javaType="String" />
		<result property="main_img" 	column="main_img" javaType="String" />
	</resultMap>
	
	<select id="get_rand_resort_list" resultMap="rand_resort">
		
		select lodging_code, main_img
		from
		(
		    select lodging_code, main_img
		    from tbl_lodging
		    where lodging_category = '리조트'
		    order by DBMS_RANDOM.RANDOM
		)
		where rownum &lt; 4
		
	</select>
	
	<!-- 메인에 표시해줄 3개의 게스트하우스를 랜덤으로 가져온다. -->
	<resultMap type="HashMap" id="rand_gusetHouse">
		<result property="lodging_code" column="lodging_code" 	javaType="String" />
		<result property="main_img" 	column="main_img" javaType="String" />
	</resultMap>
	
	<select id="get_rand_guestHouse_list" resultMap="rand_gusetHouse">
		
		select lodging_code, main_img
		from
		(
		    select lodging_code, main_img
		    from tbl_lodging
		    where lodging_category = '게스트하우스'
		    order by DBMS_RANDOM.RANDOM
		)
		where rownum &lt; 4
		
	</select>
</mapper>