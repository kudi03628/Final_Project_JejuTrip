<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(네임스페이스명은 프로젝트 전체내에서 유일해야 한다!!!!!) ====  절대  ; 쓰지마라 !!!!!!!!!! 
메퍼가 바뀌면 무조건  WAS를 껐다 켜야한다!!!!!!!!! -->
<mapper namespace="js_trip">
	
	
	<!--  조건에 따른 숙소리스트 select 해오기  -->
	<resultMap type="HashMap" id="lodgingMap">
		<result property="rno" column="rno" javaType="String" />
		<result property="lodging_name" column="LODGING_NAME" javaType="String" />
		<result property="lodging_address" column="LODGING_ADDRESS" javaType="String" />
		<result property="lodging_code" column="LODGING_CODE" javaType="String" />
		<result property="local_status" column="LOCAL_STATUS" javaType="String" />
		<result property="lodging_category" column="LODGING_CATEGORY" javaType="String" />
		<result property="main_img" column="MAIN_IMG" javaType="String" />
		<result property="review_division" column="REVIEW_DIVISION" javaType="String" />
		<result property="price" column="price" javaType="String" />
	</resultMap>
	<select id="lodgingList" parameterType="HashMap" resultMap="lodgingMap">

	  select rno,  LODGING_NAME, LODGING_ADDRESS, LODGING_CODE, LOCAL_STATUS,
		   	 LODGING_CATEGORY, MAIN_IMG, REVIEW_DIVISION, price
	  from
	  (
		  select ROWNUM as rno,  LODGING_NAME, LODGING_ADDRESS, LODGING_CODE, LOCAL_STATUS,
		   		 LODGING_CATEGORY, MAIN_IMG, REVIEW_DIVISION, price
		  from
		  (
		  	select L.LODGING_NAME, L.LODGING_ADDRESS, L.LODGING_CODE, L.LOCAL_STATUS,
	                 L.LODGING_CATEGORY, L.MAIN_IMG, L.REVIEW_DIVISION , P.price
	          from tbl_lodging L join 
	          (
	          select fk_lodging_code , min(price) as price
	          from tbl_room_detail
	          group by fk_lodging_code
	          having min(price) between #{start_price} and #{end_price}
	          )P
	          on L.lodging_code = P.fk_lodging_code
	          join
	          (
	          select fk_lodging_code
	          from 
	          tbl_lodging_convenient V
	          join tbl_convenient F
	          on V.fk_convenient_code = F.convenient_code
	         <if test='arr_convenient != null'>
		      and convenient_name in
			  <foreach collection="arr_convenient" index="i" open="(" separator="," close=")">
		    	'${arr_convenient[i]}'
		      </foreach>
		      </if>
		      group by fk_lodging_code
	          )E
	          on L.lodging_code = E.fk_lodging_code
	          join
	          (
	          	SELECT distinct lodging_code, RESERVATION_STATE
				FROM 
				(
				SELECT A.lodging_code, A.room_name, A.room_stock, max_person,
				       NVL(B.RESERVATION_CNT, 0) AS RESERVATION_CNT,
				       CASE WHEN A.room_stock - NVL(B.RESERVATION_CNT, 0) >= 1 THEN '예약가능'
				       ELSE '예약종료' END AS RESERVATION_STATE
				 FROM 
				 (
				  SELECT L.lodging_code, D.room_name, D.room_stock, max_person, price
				  FROM tbl_lodging L JOIN tbl_room_detail D
				  ON L.lodging_code = D.fk_lodging_code
				 ) A
				 LEFT JOIN
				 (
				  SELECT D.fk_lodging_code, D.room_name, COUNT(*) AS RESERVATION_CNT 
				  FROM tbl_room_detail D JOIN tbl_reservation RSV
				  ON D.room_detail_code = RSV.fk_room_detail_code
				  WHERE (RSV.check_in <![CDATA[<]]> #{check_out} AND RSV.check_out <![CDATA[>]]> #{check_in})
				  and RSV.status = 1
				  GROUP BY D.fk_lodging_code, D.room_name
				 ) B
				 ON A.lodging_code || A.room_name = B.fk_lodging_code || B.room_name
				) C
				WHERE C.RESERVATION_STATE = '예약가능' and max_person >= #{people}
	          )D
	          on L.lodging_code = D.lodging_code
	          where status = 1 
		   	<!-- 숙소 구분체크박스를 선택했다면 -->
			<if test='arr_category != null'>
		    and lodging_category in
		    <foreach collection="arr_category" index="i" open="(" separator="," close=")">
		    	'${arr_category[i]}'
		    </foreach>
		    </if>

		    <!-- 지역 구분체크박스를 선택했다면 -->
		    <if test='arr_local != null'>
		    and local_status in
			<foreach collection="arr_local" index="i" open="(" separator="," close=")">
		    	'${arr_local[i]}'
		    </foreach>
		    </if>
			<!-- 검색어를 입력하고 검색버튼을 눌렀다면 -->
		    <if test='searchWord != null'>
		    and lower(lodging_name) like '%' || lower(#{searchWord}) || '%'
			</if>
		    
			<if test='sort == ""'>
			order by lodging_code desc
			</if>
			 <if test='sort != ""'>
			order by price ${sort}
			</if>
			
		   )W
		   
	   )Q
	   where rno between #{startRno} and #{endRno}
	</select>
	
	
	
	<!-- 숙소리스트에서 조건에 따른 숙소 개수 구해오기 -->
	<select id="getLodgingTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
	    from tbl_lodging L
	    join
          (
          select fk_lodging_code
          from 
          tbl_lodging_convenient V
          join tbl_convenient N
          on V.fk_convenient_code = N.convenient_code
         <if test='arr_convenient != null'>
	      and convenient_name in
		  <foreach collection="arr_convenient" index="i" open="(" separator="," close=")">
	    	'${arr_convenient[i]}'
	      </foreach>
	      </if>
	      group by fk_lodging_code
          )T
          on L.lodging_code = T.fk_lodging_code
          join
          (
          select fk_lodging_code , min(price) as price
          from tbl_room_detail
          group by fk_lodging_code
             having min(price) between #{start_price} and #{end_price}
          )P
          on L.lodging_code = P.fk_lodging_code
          join
          (
          	SELECT distinct lodging_code, RESERVATION_STATE
			FROM 
			(
			SELECT A.lodging_code, A.room_name, A.room_stock, max_person,
			       NVL(B.RESERVATION_CNT, 0) AS RESERVATION_CNT,
			       CASE WHEN A.room_stock - NVL(B.RESERVATION_CNT, 0) >= 1 THEN '예약가능'
			       ELSE '예약종료' END AS RESERVATION_STATE
			 FROM 
			 (
			  SELECT L.lodging_code, D.room_name, D.room_stock, max_person
			  FROM tbl_lodging L JOIN tbl_room_detail D
			  ON L.lodging_code = D.fk_lodging_code
			 ) A
			 LEFT JOIN
			 (
			  SELECT D.fk_lodging_code, D.room_name, COUNT(*) AS RESERVATION_CNT 
			  FROM tbl_room_detail D JOIN tbl_reservation RSV
			  ON D.room_detail_code = RSV.fk_room_detail_code
			  WHERE (RSV.check_in <![CDATA[<]]> #{check_out} AND RSV.check_out <![CDATA[>]]> #{check_in})
			  and RSV.status = 1
			  GROUP BY D.fk_lodging_code, D.room_name
			 ) B
			 ON A.lodging_code || A.room_name = B.fk_lodging_code || B.room_name
			) C
			WHERE C.RESERVATION_STATE = '예약가능' and max_person >= #{people}
          )D
          on L.lodging_code = D.lodging_code
	    where status = 1 
	    
		<if test='arr_category != null'>
	    and lodging_category in
	    <foreach collection="arr_category" index="i" open="(" separator="," close=")">
	    	'${arr_category[i]}'
	    </foreach>
	    </if>
	    
	    <!-- 검색어를 입력하고 검색버튼을 눌렀다면 -->
	    <if test='searchWord != null'>
	    and lodging_name like '%' || #{searchWord} || '%'
		</if>
	    
	    <if test='arr_local != null'>
	    and local_status in
		<foreach collection="arr_local" index="i" open="(" separator="," close=")">
	    	'${arr_local[i]}'
	    </foreach>
	    </if>
	        
	</select>
	
	
	<!-- 숙소리스트에 표현할 편의시설 목록 구해오기 -->
	<resultMap type="HashMap" id="convenientMap">
		<result property="convenient_code" 	column="convenient_code" 	javaType="String" />
		<result property="convenient_name" 	column="convenient_name" 	javaType="String" />
	</resultMap>
	<select id="getConvenientList" resultMap="convenientMap">
		select convenient_name, convenient_code from tbl_convenient C
		<if test='lodging_code != ""'>
			join tbl_lodging_convenient LC
		    on LC.fk_convenient_code = C.convenient_code
		    join tbl_lodging L
		    on L.lodging_code = LC.fk_lodging_code
		    where lodging_code = #{lodging_code}
		</if>
	</select>
	
	
	<!-- 숙소의상세정보만 가져오기  -->
	<select id="getLodgingDetail" resultType="com.spring.app.trip.domain.LodgingVO">
		select *
		from tbl_lodging
		where lodging_code = #{lodgingCode}
	</select>
	
	
	
	<!--  한 숙소에 대한 객실리스트 select 해오기  -->
	<resultMap type="HashMap" id="RoomDetail">
		<result property="lodging_code" column="lodging_code" javaType="String" />
		<result property="room_detail_code" column="room_detail_code" javaType="String" />
		<result property="room_name" column="room_name" javaType="String" />
		<result property="price" column="price" javaType="String" />
		<result property="remaining_qty" column="remaining_qty" javaType="String" />
		<result property="min_person" column="min_person" javaType="String" />
		<result property="max_person" column="max_person" javaType="String" />
		<result property="check_inTime" column="check_intime" javaType="String" />
		<result property="check_outTime" column="check_outtime" javaType="String" />
		<result property="room_img" column="room_img" javaType="String" />
	</resultMap>
	<select id="getRoomDetail" resultMap="RoomDetail" parameterType="HashMap">
	<![CDATA[
		SELECT A.lodging_code, A.room_detail_code, A.room_name, A.price,
               A.room_stock - NVL(B.RESERVATION_CNT, 0) AS remaining_qty,
               A.min_person, A.max_person, A.room_img ,check_intime , check_outtime
			 FROM 
			 (
			  SELECT L.lodging_code, D.room_name, D.room_stock, min_person, max_person, 
                     price, room_detail_code, room_img, check_in as check_intime, check_out as check_outtime   
			  FROM tbl_lodging L JOIN tbl_room_detail D
			  ON L.lodging_code = D.fk_lodging_code 
              where lodging_code = #{lodging_code}
              ) A
			 LEFT JOIN
			 (
			  SELECT D.fk_lodging_code, D.room_name, COUNT(*) AS RESERVATION_CNT 
			  FROM tbl_room_detail D JOIN tbl_reservation RSV
			  ON D.room_detail_code = RSV.fk_room_detail_code
			  WHERE RSV.status = 1 and 
			  (
		        (RSV.check_in < #{check_out} AND RSV.check_out > #{check_in}) 
		      )
			  GROUP BY D.fk_lodging_code, D.room_name
			 ) B
			 ON A.lodging_code || A.room_name = B.fk_lodging_code || B.room_name
			 where max_person >= #{people}]]>
	</select>
	<!--  (RSV.check_in <![CDATA[<=]]> #{check_in} AND RSV.check_out <![CDATA[>=]]> #{check_out}) -->
	
	<!-- 결제페이지에서 예약하려는 숙소와 객실정보 가져오기 -->
	<resultMap type="HashMap" id="ReserveRoomDetail">
		<result property="lodging_name" column="lodging_name" javaType="String" />
		<result property="lodging_address" column="lodging_address" javaType="String" />
		<result property="lodging_code" column="lodging_code" javaType="String" />
		<result property="lodging_tell" column="lodging_tell" javaType="String" />
		<result property="room_detail_code" column="room_detail_code" javaType="String" />
		<result property="room_name" column="room_name" javaType="String" />
		<result property="price" column="price" javaType="String" />
		<result property="check_inTime" column="check_in" javaType="String" />
		<result property="check_outTime" column="check_out" javaType="String" />
		<result property="min_person" column="min_person" javaType="String" />
		<result property="max_person" column="max_person" javaType="String" />
		<result property="room_img" column="room_img" javaType="String" />
	</resultMap>
	<select id="getReserveRoomDetail" resultMap="ReserveRoomDetail">
		select lodging_code, lodging_name, lodging_address, lodging_tell, 
			   room_detail_code,room_name, price, check_in, check_out, 
           	   min_person, max_person, room_img
		       from tbl_room_detail R
		       join tbl_lodging L
		       on L.lodging_code = R.fk_lodging_code
		       where lodging_code = #{lodging_code} and R.room_detail_code = #{room_detail_code}
	</select>

	<!-- 예약번호 채번해오기 -->
	<select id="getReservationNum" resultType="String">
		select seq_reserve.nextval
		from dual
	</select>
	
	<!-- 예약테이블 insert 하기 -->
	<insert id="insertReservation" parameterType="HashMap">
		insert into tbl_reservation (RESERVATION_CODE, FK_USERID, FK_ROOM_DETAIL_CODE, CHECK_IN, CHECK_OUT, RESERVATION_PRICE)
		values(#{num}, #{userid}, #{room_detail_code}, to_date(#{check_in}, 'yyyy-mm-dd hh24:mi:ss') , to_date(#{check_out}, 'yyyy-mm-dd hh24:mi:ss'), #{totalPrice})
	</insert>
	
	
	<!-- 예약정보 알아오기 -->
	<resultMap type="HashMap" id="reservationInfo">
		<result property="reservation_code" column="reservation_code" javaType="String" />
		<result property="reservation_price" column="reservation_price" javaType="String" />
		<result property="check_in" column="check_in" javaType="String" />
		<result property="check_out" column="check_out" javaType="String" />
		<result property="leftdays" column="leftdays" javaType="String" />
		<result property="room_detail_code" column="room_detail_code" javaType="String" />
		<result property="room_name" column="room_name" javaType="String" />
		<result property="check_intime" column="check_intime" javaType="String" />
		<result property="check_outtime" column="check_outtime" javaType="String" />
		<result property="min_person" column="min_person" javaType="String" />
		<result property="max_person" column="max_person" javaType="String" />
		<result property="lodging_code" column="lodging_code" javaType="String" />
		<result property="local_status" column="local_status" javaType="String" />
		<result property="lodging_category" column="lodging_category" javaType="String" />
		<result property="lodging_name" column="lodging_name" javaType="String" />
		<result property="lodging_tell" column="lodging_tell" javaType="String" />
		<result property="lodging_address" column="lodging_address" javaType="String" />
	</resultMap>
	<select id="getReservationInfo" parameterType="HashMap" resultMap="reservationInfo">
		select reservation_code, reservation_price, check_in, check_out, local_status,
          	   leftdays, room_detail_code, room_name, check_intime, check_outtime,
               min_person, max_person, lodging_code, lodging_category, lodging_name, 
               lodging_tell, lodging_address
			   from 
		   	   (
		   		select reservation_code, fk_room_detail_code, reservation_price, 
		   			   to_char(check_in, 'yyyy-mm-dd') as check_in, to_char(check_out, 'yyyy-mm-dd') as check_out,
		        	   to_date(to_char(check_in, 'yyyy-mm-dd'), 'yyyy-mm-dd') - to_date(to_char(sysdate, 'yyyy-mm-dd') , 'yyyy-mm-dd')  as leftdays
		        from tbl_reservation
		        where reservation_code = #{reservation_code}    
		       )RSV join 
		       (
		   		select room_detail_code, fk_lodging_code, room_name, check_in as check_intime, check_out as check_outtime, min_person, max_person
		   		from tbl_room_detail
		   		where room_detail_code = #{room_detail_code}
		       )R
		       on RSV.fk_room_detail_code = R.room_detail_code
		       join
		       (
		   		select lodging_code, lodging_category, lodging_name, lodging_tell, lodging_address, local_status 
		   		from tbl_lodging
		   		where lodging_code = #{lodging_code}
		       )L
		       on R.fk_lodging_code = L.lodging_code
	
	</select>
	
	
	<!-- 한 숙소 리뷰 페이징 처리를 위한 토탈 카운트 구해오기 -->
	<select id="getLodgingReviewTotalCount" parameterType="String" resultType="int">
		select count(*) from tbl_review
     	where parent_code = #{lodging_code}
	</select>
	
	
	<!-- 한 숙소에 대한 리뷰 페이징처리해서 보여주기 -->
	<resultMap type="HashMap" id="reviewList">
		<result property="rno" column="rno" javaType="String" />
		<result property="review_code" column="review_code" javaType="String" />
		<result property="fk_userid" column="fk_userid" javaType="String" />
		<result property="user_name" column="user_name" javaType="String" />
		<result property="parent_code" column="parent_code" javaType="String" />
		<result property="review_content" column="review_content" javaType="String" />
		<result property="registerday" column="registerday" javaType="String" />
	</resultMap>
	<select id="getLodgingReviewList_Paging" parameterType="HashMap" resultMap="reviewList">
		select rno, review_code, fk_userid, user_name,
			   parent_code, review_content, registerday
		from
	    (
	    select row_number() over(order by review_code desc) as rno, review_code, 
	           fk_userid, user_name, parent_code, review_content, R.registerday
	    from tbl_member M join tbl_review R
	    on M.userid = R.fk_userid
	    where R.parent_code = #{lodging_code}
	    )V
	    where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 한 숙소에 대해 리뷰를 작성을 위해 해당숙소를 예약했는지 안했는지 알아오기 -->
	<select id="chkReservation" parameterType="HashMap" resultType="int">
		select count(*) as chk
     	from tbl_reservation R
     	join tbl_room_detail D
     	on R.fk_room_detail_code = D.room_detail_code
     	where status = 1 and fk_lodging_code = #{lodging_code} and fk_userid = #{userid}
	</select>
	
	
	<!-- 한 숙소에 대해 리뷰를 작성했는지 안했는지 판단해오기 -->
	<select id="chkReview" parameterType="HashMap" resultType="int">
		select count(*) as cnt
     	from tbl_review
     	where fk_userid = #{userid} and parent_code = #{lodging_code}
	</select>
	
	
	<!-- 한 숙소의 리뷰 수정하기 -->
	<update id="updateLodgingComment" parameterType="HashMap">
		update tbl_review set review_content = #{content} , registerday = sysdate 
		where review_code = #{review_code}
	</update>
	
	<!-- 한 숙소의 리뷰 삭제하기 -->
	<delete id="deleteLodgingComment">
		delete from tbl_review where review_code = #{review_code}
	</delete>
 
 
 	<!-- 한 숙소의 리뷰 작성하기 -->
 	<insert id="addLodgingReview" parameterType="ReviewVO">
 		insert into tbl_review (review_code, fk_userid, parent_code, review_content, review_division_r)
 		values(seq_review.nextval , #{fk_userid}, #{parent_code}, #{review_content}, #{review_division_R})
 	</insert>
 	
 	
 	<!-- 랜덤 맛집 추천을 위한 sql문 -->
 	<select id="getRandomFood" parameterType="String" resultType="FoodstoreVO">
 		select food_store_code, local_status, food_name, food_content, food_main_img
		from (
		    select food_store_code, local_status, food_name, food_content, food_main_img
		    from tbl_food_store
               where local_status = #{local_status}
		    order by DBMS_RANDOM.RANDOM
		)
        where rownum =1
 	
 	</select>
 	
 	<!-- 랜덤 즐길거리 추천을 위한 sql문 -->
 	<select id="getRandomPlay" parameterType="String" resultType="PlayVO">
 		select play_code, local_status, play_name, play_content, play_main_img
		from (
		    select play_code, local_status, play_name, play_content, play_main_img
		    from tbl_play
               where local_status = #{local_status}
		    order by DBMS_RANDOM.RANDOM
		)
           where rownum =1   
 	
 	</select>
 	
 	<!-- 한 숙소에대해 좋아요를 했는지 안했는데 판단하기 -->
 	<select id="getLodgingLike" parameterType="HashMap" resultType="int">
 		select count(*) from tbl_like where parent_code = #{lodging_code} and fk_userid = #{userid}
 	</select>
 	
 	
 	<!-- 로그인이 되어있고 한 숙소에 대해 좋아요 취소하기 -->
 	<delete id="lodgingCancelAddLike" parameterType="HashMap">
 		delete from tbl_like where parent_code = #{lodging_code} and fk_userid = #{userid}	
 	</delete>
 
 
 	<!-- 로그인이 되어있고 한 숙소에 대해 좋아요 표시하기  -->
 	<insert id="lodgingAddLike" parameterType="HashMap">
 		insert into tbl_like (fk_userid, parent_code, like_division_r) values(#{userid}, #{lodging_code}, 'A')
 	</insert>
 	
 	
 	<!-- 숙소 예약시 일정테이블에다가 insert 하기 -->
 	<insert id="insertLodgingSchedule" parameterType="HashMap">
 		insert into tbl_calendar_schedule(scheduleno, startdate, enddate, subject, color, place, content, fk_smcatgono, fk_lgcatgono, fk_userid ,schedule_divison ,parent_code) 
    	values(seq_scheduleno.nextval, to_date(#{check_in}, 'yyyy-mm-dd hh24:mi:ss'), to_date(#{check_out}, 'yyyy-mm-dd hh24:mi:ss'), 
    		  #{lodging_name}, '#ffcc80', #{lodging_address}, #{room_name}, 1, 1, #{userid} , 'A',#{lodging_code} )
 	</insert>
 	
 	
 	<!-- 객실등록과 활용을 위한 객실등록 시퀀스 채번해오기 -->
 	<select id="getRoomDetailSeq" resultType="String">
 		select seq_room.nextval
 		from dual
 	</select>
 	
 	
 	<!-- 객실등록하는 insert -->
 	<insert id="insertRoomDetail" parameterType="RoomDetailVO">
 		INSERT INTO tbl_room_detail (room_detail_code, fk_lodging_code, room_name, price, check_in, check_out, min_person, max_person, room_img,fileName,orgFilename,fileSize)
 		values (#{room_detail_code}, #{fk_lodging_code}, #{room_name}, #{price}, #{check_in}, #{check_out}, #{min_person}, #{max_person}, #{room_img}, #{fileName}, #{orgFilename}, #{fileSize})
 	</insert>
 	
 	<!-- 등록된 숙소 개수 구해오기 -->
 	<select id="getRoomCnt" parameterType="String" resultType="int">
 		select count(*) from tbl_room_detail where fk_lodging_code = #{fk_lodging_code}
 	</select>
 	
 	
 	<!-- 수정을 위한 한 숙소에 객실정보 가져오기 -->
 	<select id="getForUpdateRoomList" parameterType="String" resultType="RoomDetailVO">
 		select * from tbl_room_detail where fk_lodging_code = #{fk_lodging_code}
 	</select>
 	
 	
 	<!-- 객실 정보 수정하기 -->
 	<update id="updateRoomDetail" parameterType="RoomDetailVO">
 		update tbl_room_detail set 
 		room_name = #{room_name},
 		price = #{price},
 		check_in = #{check_in},
 		check_out = #{check_out},
 		min_person = #{min_person}, 
 		max_person = #{max_person},
 		room_img = #{room_img},
 		fileName = #{fileName},
 		orgFilename = #{orgFilename},
 		fileSize = #{fileSize}
 		where room_detail_code = #{room_detail_code}
 	</update>
 	
 	
 	<!-- 수정할때 객실 삭제하기 -->
 	<delete id="deleteRoomDetail" parameterType="String">
 		delete from tbl_room_detail where room_detail_code = #{room_detail_code}
 	</delete>
 	
 	
 	
 	<!-- 숙소 정보 수정하기 -->
 	<update id="updateLodging" parameterType="lodgingVO">
 		update tbl_lodging set
 		lodging_name = #{lodging_name},
 		local_status = #{local_status},
		lodging_category = #{lodging_category},
		lodging_tell = #{lodging_tell},
		lodging_content = #{lodging_content},
		lodging_address = #{lodging_address},
		main_img = #{main_img},
		fileName = #{fileName},
		orgFilename = #{orgFilename},
		fileSize = #{fileSize}
		where lodging_code = #{lodging_code}
 	</update>
 	
	
	<!-- 트랜잭션 1 (존재하는 숙소에 대한 편의시설 정보 삭제하기)  -->
	<delete id="t_deleteLodgingConvenient" parameterType="String">
		delete from tbl_lodging_convenient where fk_lodging_code = #{fk_lodging_code}
	
	</delete>
	
	
	<!-- 트랜잭션 2 (숙소에 대한 편의시설 정보 insert하기) -->
	<insert id="t_insertLodgingConvenient" parameterType="HashMap">
		insert into tbl_lodging_convenient (fk_convenient_code,fk_lodging_code)
		values (#{convenient_code}, #{lodging_code})
	</insert>
 	
 	
 	<!-- 등록된 숙소정보 삭제하기 -->
 	<delete id="deleteLodgingInfo" parameterType="String">
 		delete from tbl_lodging where lodging_code = #{lodging_code}
 	</delete>
 	
 	
 	<!-- ==== e메일을 발송할 회원 대상 알아오기 ==== -->
 	<resultMap type="HashMap" id="reservationEmailList_Map">
       <result property="reservation_code"     column="reservation_code"     javaType="String" />
       <result property="userid"        column="userid"        javaType="String" />
       <result property="user_name"        column="user_name"        javaType="String" />
       <result property="email"        column="email"        javaType="String" />
       <result property="check_in"        column="check_in"        javaType="String" />
   </resultMap>
	<select id="reservationEmailList" resultMap="reservationEmailList_Map">
 	SELECT R.reservation_code, M.userid, M.user_name, M.email,
       		   to_char(R.check_in, 'yyyy-mm-dd hh24:mi') AS check_in
		FROM tbl_member M JOIN (select * from tbl_reservation 
        where mailsendcheck = 0 and status = 1 and
        	  
              to_char(check_in,'yyyymmdd') = to_char(sysdate+1,'yyyymmdd') ) R 
		ON M.userid = R.fk_userid
 	</select>
 	
 	
 	<!-- === 이메일 발송하고나서 메일체크 update  === -->
	<update id="updateMailSendCheck" parameterType="HashMap">
		update tbl_reservation set mailSendCheck = 1 
		where reservation_code in <foreach collection="arr_reservationCode" index="i" open="(" separator="," close=")">${arr_reservationCode[i]}</foreach> 
	</update>
	
	
	<!-- sysdate에 해당하는 축제와 행사 보여주기 (4개가 넘는다면 랜덤으로 보여주기) -->
	<resultMap type="HashMap" id="getCurrentFestival_Map">
       <result property="festival_no"     column="festival_no"     javaType="String" />
       <result property="title_name"      column="title_name"        javaType="String" />
       <result property="img"        	  column="img"        javaType="String" />
       <result property="startdate"       column="startdate"        javaType="String" />
       <result property="enddate"         column="enddate"        javaType="String" />
       <result property="local_status"    column="local_status"        javaType="String" />
       <result property="link"            column="link"        javaType="String" />
   </resultMap>
	<select id="getCurrentFestival" resultMap="getCurrentFestival_Map">
		<![CDATA[select festival_no, title_name, img, startdate, enddate, local_status, link 
		   from 
		   (
		   select festival_no, title_name, img, to_char(startdate, 'yyyy-mm-dd') as startdate ,
		   to_char(enddate, 'yyyy-mm-dd') as enddate, local_status, link 
		   from tbl_festival
		   where startdate <= sysdate and 
		   		enddate >= sysdate
		   order by DBMS_RANDOM.RANDOM		
		   )
		   where rownum <= 4]]>
	</select>
	
	
	<!-- 커뮤니티 메인에서 게시글로 연결해주기 -->
	<select id="getPopularBoard" resultType="BoardVO">
		<![CDATA[select *
	    from
	    (
	    select * 
	    from tbl_board
	    
	    order by readcount desc
	    )
	    where rownum <=7]]>
	</select>
	
	<!-- where regdate between to_date(to_char(sysdate, 'yyyy-mm-dd') , 'yyyy-mm-dd') and  
	    to_date(to_char(sysdate, 'yyyy-mm-dd') || ' ' || '23:59:59' , 'yyyy-mm-dd hh24:mi:ss') -->
	    
	    
	
	<!-- 회원이 예약신청한 상세정보 가져오기 -->
	<resultMap type="HashMap" id="getMemberReservationInfo_Map">
       <result property="lodging_name"      column="lodging_name"        javaType="String" />
       <result property="room_name"        	  column="room_name"        javaType="String" />
       <result property="lodging_address"       column="lodging_address"        javaType="String" />
       <result property="lodging_category"         column="lodging_category"        javaType="String" />
       <result property="lodging_tell"    column="lodging_tell"        javaType="String" />
       <result property="room_img"            column="room_img"        javaType="String" />
       <result property="status"            column="status"        javaType="String" />
       <result property="check_in"    column="check_in"        javaType="String" />
       <result property="str_check_in"    column="str_check_in"        javaType="String" />
       <result property="str_check_out"            column="str_check_out"        javaType="String" />
       <result property="reservation_price"    column="reservation_price"        javaType="String" />
       <result property="reservation_date"    column="reservation_date"        javaType="String" />
       <result property="check_intime"            column="check_intime"        javaType="String" />
       <result property="check_outtime"            column="check_outtime"        javaType="String" />
   </resultMap>
	<select id="getMemberReservationInfo" parameterType="String" resultMap="getMemberReservationInfo_Map">
		select L.lodging_name, D.room_name,  L.lodging_address,
	           L.lodging_category, L.lodging_tell, D.room_img , R.status, R.check_in,
	           to_char(R.check_in , 'yyyy-mm-dd') as str_check_in, to_char(R.check_out, 'yyyy-mm-dd') as str_check_out ,
	           R.reservation_price, R.reservation_date,
	           D.check_in as check_intime , D.check_out as check_outtime , to_char(sysdate, 'yyyy-mm-dd') as today
	    from tbl_reservation R
	    join tbl_room_detail D
	    on R.fk_room_detail_code = D.room_detail_code
	    join tbl_lodging L
	    on D.fk_lodging_code = L.lodging_code
	    where R.reservation_code = #{reservation_code}
	</select>    
	
	
	<!-- 회원이 직접 예약취소상태 만들기 -->
	<update id="memberCancelReserve" parameterType="String">
		update tbl_reservation set status = 2
		where reservation_code = #{reservation_code}
	</update>     
	
	
	<!-- 가격슬라이더 최대가격을 위한 숙소 최대가격 구해오기  -->
	<select id="getLodgingMaxPirce" resultType="int">
		select max(price)
		from tbl_room_detail
	</select>
	
	
	<!-- 2024년 축제와 행사 목록 -->
	<resultMap type="HashMap" id="getExcel_to_festivalList">
       <result property="festival_no"      column="festival_no"        javaType="String" />
       <result property="title_name"        	  column="title_name"        javaType="String" />
       <result property="img"       column="img"        javaType="String" />
       <result property="startdate"         column="startdate"        javaType="String" />
       <result property="enddate"    column="enddate"        javaType="String" />
       <result property="local_status"            column="local_status"        javaType="String" />
       <result property="link"            column="link"        javaType="String" />
   </resultMap>
	<select id="excel_to_festivalList" resultMap="getExcel_to_festivalList">
		
		select festival_no, title_name, img, to_char(startdate, 'yyyy-mm-dd') as startdate,
				to_char(enddate, 'yyyy-mm-dd') as enddate, local_status, link
		from tbl_festival
	
	</select>
 
</mapper>
