<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(네임스페이스명은 프로젝트 전체내에서 유일해야 한다!!!!!) ====  절대  ; 쓰지마라 !!!!!!!!!! 
메퍼가 바뀌면 무조건  WAS를 껐다 켜야한다!!!!!!!!! -->
<mapper namespace="dy_trip">
	
	<!-- 회원가입 처리하기 -->
	<insert id="memberRegister" parameterType="MemberVO">
		insert into tbl_member(userid, email, pw, user_name, mobile, address, detail_address, birthday, gender)
		values(#{userid}, #{email}, #{pw}, #{user_name}, #{mobile}, #{address}, #{detail_address}, #{birthday}, #{gender})
	</insert>
	
	
	<!-- 일반회원 아이디 중복확인 -->
	<select id="useridDuplicateCheck" parameterType="String" resultType="String">
		select userid
		from tbl_member
		where userid = #{userid}
	</select>
	
	
	<!-- 일반회원 이메일 중복확인 -->
	<select id="userEmailDuplicateCheck" parameterType="String" resultType="String">
		select email
		from tbl_member
		where email = #{email}
	</select>
	
	
	<!-- 로그인 처리하기 (일반회원, 관리자) -->
	<select id="getLoginMember" parameterType="HashMap" resultType="MemberVO">
		SELECT userid, user_name, pwdchangegap,
		       NVL(lastlogingap, trunc(months_between(sysdate, registerday))) AS lastlogingap, 
		       idle, email, mobile, address, detail_address, birthday, gender
		FROM 
		( select userid, user_name,
		         trunc( months_between(sysdate, lastpwdchangedate) ) AS pwdchangegap,
		         registerday, idle, email, mobile, address, detail_address, birthday, gender
		  from tbl_member 
		  where status = 1 and userid = #{id} and pw = #{pw}
		) M 
		CROSS JOIN 
		( select trunc( months_between(sysdate, max(logindate)) ) as lastlogingap 
		  from tbl_member_loginhistory 
		  where fk_userid = #{id} ) H
	</select>
	
	
	<!-- tbl_member 테이블의 idle 컬럼의 값을 1로 변경하기 -->
	<update id="updateMemberIdle" parameterType="HashMap">
		update tbl_member set idle = 1
		where userid = #{id}
	</update>
	
	
	<!-- tbl_member_loginhistory 테이블에 로그인 기록 입력하기 -->
	<insert id="insert_member_loginhistory" parameterType="HashMap">
		insert into tbl_member_loginhistory (fk_userid, logindate, clientip)
		values(#{id}, default, #{clientip})
	</insert>
	
	
	<!-- 로그인 처리하기(업체회원) -->
	<select id="getLoginCompanyMember" parameterType="HashMap" resultType="CompanyVO">
		SELECT companyid, company_name, pwdchangegap,
		       NVL(lastlogingap, trunc(months_between(sysdate, registerday))) AS lastlogingap, 
		       idle, email, mobile
		FROM 
		( select companyid, company_name,
		         trunc( months_between(sysdate, lastpwdchangedate) ) AS pwdchangegap,
		         registerday, idle, email, mobile
		  from tbl_company
		  where status = 1 and companyid = #{id} and pw = #{pw}
		) M 
		CROSS JOIN 
		( select trunc( months_between(sysdate, max(logindate)) ) as lastlogingap 
		  from tbl_company_loginhistory 
		  where fk_companyid = #{id} ) H
	</select>
	
	
	<!-- tbl_company 테이블의 idle 컬럼의 값을 1로 변경하기 -->
	<update id="updateCompanyIdle" parameterType="HashMap">
		update tbl_company set idle = 1
		where companyid = #{id}
	</update>
	
	
	<!-- tbl_company_loginhistory 테이블에 로그인 기록 입력하기 -->
	<insert id="insert_company_loginhistory" parameterType="HashMap">
		insert into tbl_company_loginhistory (fk_companyid, logindate, clientip)
		values(#{id}, default, #{clientip})
	</insert>
	
	
	<!-- 아이디찾기 처리하기 (일반회원, 관리자) -->
	<resultMap type="HashMap" id="memberFindInfo">
		<result property="userid" column="userid" javaType="String" />
		<result property="user_name" column="user_name" javaType="String" />
	</resultMap>
	
	<select id="memberIdFind" parameterType="HashMap" resultMap="memberFindInfo">
		select userid, user_name
		from tbl_member
		where user_name = #{name} and email = #{email}
	</select>
	
	
	<!-- 아이디찾기 처리하기 (업체회원) -->
	<resultMap type="HashMap" id="companyFindInfo">
		<result property="companyid" column="companyid" javaType="String" />
		<result property="company_name" column="company_name" javaType="String" />
	</resultMap>
	
	<select id="companyIdFind" parameterType="HashMap" resultMap="companyFindInfo">
		select companyid, company_name
		from tbl_company
		where company_name = #{name} and email = #{email}
	</select>
	
	
	<!-- 사용자가 존재하는지 확인하기 (일반회원, 관리자) -->
	<select id="isMemberExist" parameterType="HashMap" resultType="String">
		select userid
		from tbl_member
		where userid = #{id} and email = #{email}
	</select>
	
	<!-- 사용자가 존재하는지 확인하기 (업체회원) -->
	<select id="isCompanyExist" parameterType="HashMap" resultType="String">
		select companyid
		from tbl_company
		where companyid = #{id} and email = #{email}
	</select>
	
	
	<!-- 비밀번호 변경 (일반회원, 관리자) -->
	<update id="memberPwUpdate" parameterType="HashMap">
		update tbl_member set pw = #{new_pw}, lastpwdchangedate = sysdate
		where userid = #{id}
	</update>
	
	<!-- 비밀번호 변경 (업체회원) -->
	<update id="companyPwUpdate" parameterType="HashMap">
		update tbl_company set pw = #{new_pw}, lastpwdchangedate = sysdate
		where companyid = #{id}
	</update>
	
	
	<!-- 맛집등록 - 일련번호 채번해오기 -->
	<select id="getCommonSeq" resultType="String">
		select SEQ_COMMON.nextval AS food_store_code
		from dual
	</select>
	
	
	<!-- === 데이터베이스에 맛집 정보 insert 하기 === -->
	<insert id="foodstoreRegister" parameterType="FoodstoreVO">
		insert into tbl_food_store(food_store_code, food_category, local_status, food_name, food_content, food_businesshours, food_mobile, food_address, food_main_img, filename, orgfilename, filesize)
		values(#{food_store_code}, #{food_category}, #{local_status}, #{food_name}, #{food_content}, #{food_businesshours}, #{food_mobile}, #{food_address}, #{fileName}, #{fileName}, #{orgFilename}, #{fileSize})
	</insert>
	
	
	<!-- tbl_food_add_img 테이블에 추가이미지 파일명 insert 하기 -->
	<insert id="insert_food_add_img" parameterType="HashMap">
		insert into tbl_food_add_img(food_add_code, fk_food_store_code, food_add_img)
		values(seq_foodaddimg.nextval, #{fk_food_store_code}, #{food_add_img})
	</insert>
	
	
	<!-- 기존 비밀번호와 값이 일치한지 비교하기 (일반회원, 관리자) -->
	<select id="isSamePwMember" parameterType="HashMap" resultType="String">
		select pw
		from tbl_member
		where userid = #{id} and pw = #{new_pw}
	</select>
	
	
	<!-- 기존 비밀번호와 값이 일치한지 비교하기 (업체회원) -->
	<select id="isSamePwCompany" parameterType="HashMap" resultType="String">
		select pw
		from tbl_company
		where companyid = #{id} and pw = #{new_pw}
	</select>
	
	
	<!-- 기존의 로그인 기록 삭제하기 (일반회원, 관리자) -->
	<delete id="deleteMemberLoginHistory" parameterType="String">
		delete from tbl_member_loginhistory
		where fk_userid = #{id}
	</delete>
	
	
	<!-- 기존의 로그인 기록 삭제하기 (업체회원) -->
	<delete id="deleteCompanyLoginHistory" parameterType="String">
		delete from tbl_company_loginhistory
		where fk_companyid = #{id}
	</delete>
	
	
	<!-- idle을 0으로 변경하기 (일반회원, 관리자) -->
	<update id="memberIdleUpdate" parameterType="String">
		update tbl_member set idle = 0
		where userid = #{id}
	</update>
	
	
	<!-- idle을 0으로 변경하기 (업체회원) -->
	<update id="companyIdleUpdate" parameterType="String">
		update tbl_company set idle = 0
		where companyid = #{id}
	</update>
	
	
	<!-- 비밀번호 변경 날짜(lastpwdchangedate)를 현재 날짜로 변경하기 (일반회원, 관리자) -->
	<update id="updateMemberPwdChangeDate" parameterType="String">
		update tbl_member set lastpwdchangedate = sysdate
		where userid = #{id}
	</update>
	
	
	<!-- 비밀번호 변경 날짜(lastpwdchangedate)를 현재 날짜로 변경하기 (업체회원) -->
	<update id="updateCompanyPwdChangeDate" parameterType="String">
		update tbl_company set lastpwdchangedate = sysdate
		where companyid = #{id}
	</update>
	
	
	<!-- 커뮤니티 글 등록 처리하기 -->
	<insert id="addBoard" parameterType="BoardVO">
		insert into tbl_board(seq, fk_userid, name, subject, content, pw, category)
		values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, #{category})
	</insert>
	
	
	<!-- 커뮤니티 글 등록 처리하기 (첨부 파일이 있는 경우) -->
	<insert id="addBoard_withFile" parameterType="BoardVO">
		insert into tbl_board(seq, fk_userid, name, subject, content, pw, fileName, orgFilename, fileSize, category)
		values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, #{fileName}, #{orgFilename}, #{fileSize}, #{category})
	</insert>
	
	
	<!-- 게시판 총 게시물 건수 조회하기 -->
	<select id="getBoardTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_board
		where status = 1 and category = #{category}
		<choose>
			<when test="searchType == 'subject' and searchWord != ''">
				and lower(subject) like '%' || lower(#{searchWord}) || '%'
			</when>
			<when test="searchType == 'content' and searchWord != ''">
				and lower(content) like '%' || lower(#{searchWord}) || '%'
			</when>
			<when test="searchType == 'name' and searchWord != ''">
				and lower(name) like '%' || lower(#{searchWord}) || '%'
			</when>
		</choose>
	</select>
	
	
	<!-- 커뮤니티 게시판 리스트 조회하기 -->
	<select id="getBoardList" parameterType="HashMap" resultType="BoardVO">
		SELECT seq, fk_userid, name, subject, readCount, regDate, commentCount
			 , filename, orgfilename, filesize
		FROM
		(
			select row_number() over(order by seq desc) AS rno
				 , seq, fk_userid, name, subject
			     , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi') AS regDate
			     , commentCount, filename, orgfilename, filesize
			from tbl_board
			where status = 1 and category = #{category}
			<choose>
				<when test="searchType == 'subject' and searchWord != ''">
					and lower(subject) like '%' || lower(#{searchWord}) || '%'
				</when>
				<when test="searchType == 'content' and searchWord != ''">
					and lower(content) like '%' || lower(#{searchWord}) || '%'
				</when>
				<when test="searchType == 'name' and searchWord != ''">
					and lower(name) like '%' || lower(#{searchWord}) || '%'
				</when>
			</choose>
		) V
		WHERE V.rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 검색 조건이 있을 시 글 1개 조회하기 -->
	<select id="getViewBoard" parameterType="HashMap" resultType="BoardVO">
		SELECT previousseq, previoussubject
		     , seq, fk_userid, name, subject, content, readCount, regDate, pw
		     , nextseq, nextsubject
		     , commentcount, fileName, orgFilename, fileSize, category
		FROM
		(
		    select lag(seq, 1) over(order by seq desc) AS previousseq
		         , lag(subject, 1) over(order by seq desc) AS previoussubject
		         , seq, fk_userid, name, subject, content, readCount
		         , to_char(regDate, 'yyyy-mm-dd hh24:mi') as regDate, pw
		         , lead(seq, 1) over(order by seq desc) AS nextseq
		         , lead(subject, 1) over(order by seq desc) AS nextsubject
		         , commentcount, fileName, orgFilename, fileSize, category
		    from tbl_board
		    where status = 1 and category = #{category}
    		<choose>
				<when test="searchType == 'subject' and searchWord != ''">
					and lower(subject) like '%' || lower(#{searchWord}) || '%'
				</when>
				<when test="searchType == 'content' and searchWord != ''">
					and lower(content) like '%' || lower(#{searchWord}) || '%'
				</when>
				<when test="searchType == 'subject_content' and searchWord != ''">
					and (lower(subject) like '%' || lower(#{searchWord}) || '%' or 
						 lower(content) like '%' || lower(#{searchWord}) || '%')
				</when>
				<when test="searchType == 'name' and searchWord != ''">
					and lower(name) like '%' || lower(#{searchWord}) || '%'
				</when>
				<otherwise></otherwise>
			</choose>
		) V
		WHERE V.seq = #{seq}
	</select>
	
	
	<!-- 글 조회수 1 증가하기 -->
	<update id="increase_readCount" parameterType="String">
		update tbl_board
		set readCount = readCount + 1
		where seq = #{seq}
	</update>
	
	
	<!-- 댓글 쓰기 -->
	<insert id="addComment" parameterType="CommentVO">
		<if test='fk_seq.equals("")'>
			insert into tbl_comment(seq, fk_userid, name, content, parentSeq, groupno, fk_seq, depthno)
			values(commentSeq.nextval, #{fk_userid}, #{name}, #{content}, #{parentSeq}, #{groupno}, default, default)
		</if>
		
		<!-- 답댓글인 경우 -->
		<if test='!fk_seq.equals("")'>
			insert into tbl_comment(seq, fk_userid, name, content, parentSeq, groupno, fk_seq, depthno)
			values(commentSeq.nextval, #{fk_userid}, #{name}, #{content}, #{parentSeq}, #{groupno}, #{fk_seq}, #{depthno}+1)
		</if>
	</insert>
	
	
	<!-- 댓글 쓰기 - 원게시물(tbl_board 테이블) 댓글 개수 증가 -->
	<update id="updateCommentCount" parameterType="String">
		update tbl_board set commentcount = commentcount + 1
		where seq = #{parentSeq}
	</update>
	
	
	<!-- 댓글 목록 불러오기 -->
	<select id="getViewComment" parameterType="HashMap" resultType="CommentVO">
		SELECT seq, fk_userid, name, content, regDate
		     , parentseq, status, groupno, fk_seq, depthno
		FROM
		(
		    SELECT rownum AS RNO
		         , seq, fk_userid, name, content, regDate
		         , parentseq, status, groupno, fk_seq, depthno
		    FROM
		    (
		        select seq, fk_userid, name, content
		             , to_char(regDate, 'yyyy-mm-dd hh24:mi') AS regDate
		             , parentseq, status, groupno, fk_seq, depthno
		        from tbl_comment
		        where parentSeq = #{parentSeq}
                and (status = 1 
               			or (status = 0 and exists (
		                   select 1 
		                   from tbl_comment sub 
		                   where sub.fk_seq = tbl_comment.seq
		                   and sub.status = 1
		               	))
		          	)
		        start with fk_seq = 0
		        connect by prior seq = fk_seq
		        order siblings by groupno desc, seq asc
		    ) V
		) T  
		WHERE RNO between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 게시물당 댓글 총 개수 (페이징 처리 시 보여주는 순번을 나타내기 위함) -->
	<select id="getCommentTotalCount" parameterType="String" resultType="int">
		select count(*)
		from tbl_comment
		where parentSeq = #{parentSeq}
		and (status = 1 
		    or (status = 0 and exists (
	       		select 1 
	            from tbl_comment sub 
	            where sub.fk_seq = tbl_comment.seq
	            and sub.status = 1
		    ))
		)
	</select>
	
	
	<!-- 글번호에 대한 글 조회하기 -->
	<select id="getBoardInfo" parameterType="String" resultType="BoardVO">
		select seq, fk_userid, name, subject, content, pw,
			   readcount, regdate, commentcount, filename, orgfilename, filesize, category
		from tbl_board
		where status = 1 and seq = #{seq}
	</select>
	
	
	<!-- 파일 첨부가 없는 글 수정하기 -->
	<update id="updateBoardEnd" parameterType="BoardVO">
		update tbl_board
		set subject = #{subject}, content = #{content}, category = #{category}
		where seq = #{seq} and fk_userid = #{fk_userid} and pw = #{pw}
	</update>
	
	
	<!-- 파일 첨부가 있는 글 수정하기 -->
	<update id="updateBoard_withFile" parameterType="BoardVO">
		update tbl_board
		set subject = #{subject}, content = #{content}, category = #{category},
			filename = #{fileName}, orgfilename = #{orgFilename}, filesize = #{fileSize}
		where seq = #{seq} and fk_userid = #{fk_userid} and pw = #{pw}
	</update>
	
	
	<!-- 커뮤니티 글 삭제 처리하기 (status를 0으로 update 하기) -->
	<update id="deleteBoard" parameterType="HashMap">
		update tbl_board set status = 0
		where seq = #{seq} and pw = #{pw}
	</update>
	
	
	<!-- 댓글번호에 대한 댓글이 있는지 조회하기 -->
	<select id="getCommentInfo" parameterType="String" resultType="CommentVO">
		select seq, fk_userid, name, content, regdate, parentseq
		from tbl_comment
		where status = 1 and seq = #{seq}
	</select>
	
	
	<!-- 커뮤니티 댓글 수정 -->
	<update id="updateComment" parameterType="HashMap">
		update tbl_comment set content = #{new_content}
		where seq = #{seq}
	</update>
	
	
	<!-- 커뮤니티 댓글 삭제 -->
	<update id="deleteComment" parameterType="String">
		update tbl_comment set status = 0
		where seq = #{seq}
	</update>
	
	
	<!-- 커뮤니티 댓글 삭제 시 해당 글의 댓글 개수 1 감소 -->
	<update id="decreaseCommentCount" parameterType="String">
		update tbl_board set commentCount = commentCount - 1
		where seq = #{parentSeq}
	</update>
	
	
	<!-- 게시판 댓글 개수 알아오기 -->
	<select id="getCommentCount" parameterType="String" resultType="int">
		select commentCount
		from tbl_board
		where seq = #{seq}
	</select>
	
	
	<!-- 댓글  groupno 컬럼의 최대값 구하기 -->
	<select id="getGroupnoMax" resultType="int">
		select NVL(max(groupno), 0)
		from tbl_comment
	</select>
	
	
	<!-- 맛집 등록 시 중복 검사 -->
	<select id="isExistFoodstore" parameterType="HashMap" resultType="String">
		select food_store_code
		from tbl_food_store
		where (food_name like '%' || #{food_name} || '%') and local_status = #{local_status}
	</select>
	
	
</mapper>
