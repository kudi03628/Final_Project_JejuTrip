<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(네임스페이스명은 프로젝트 전체내에서 유일해야 한다!!!!!) ====  절대  ; 쓰지마라 !!!!!!!!!! 
메퍼가 바뀌면 무조건  WAS를 껐다 켜야한다!!!!!!!!! -->
<mapper namespace="dy_trip">
	
	<!-- 회원가입 처리하기 -->
	<insert id="memberRegister" parameterType="com.spring.app.trip.domain.MemberVO">
		insert into tbl_member(userid, email, pw, user_name, mobile, address, detail_address, birthday, gender)
		values(#{userid}, #{email}, #{pw}, #{user_name}, #{mobile}, #{address}, #{detail_address}, #{birthday}, #{gender})
	</insert>
	
	
	<!-- 일반회원 아이디 중복확인 -->
	<select id="useridDuplicateCheck" parameterType="String" resultType="String">
		select userid
		from tbl_member
		where userid = #{userid}
	</select>
	
	
	<!-- 일반회원 이메일 중복확인 -->
	<select id="userEmailDuplicateCheck" parameterType="String" resultType="String">
		select email
		from tbl_member
		where email = #{email}
	</select>
	
	
	<!-- 로그인 처리하기 (일반회원, 관리자) -->
	<select id="getLoginMember" parameterType="HashMap" resultType="com.spring.app.trip.domain.MemberVO">
		SELECT userid, user_name, pwdchangegap,
		       NVL(lastlogingap, trunc(months_between(sysdate, registerday))) AS lastlogingap, 
		       idle, email, mobile, address, detail_address, birthday, gender
		FROM 
		( select userid, user_name,
		         trunc( months_between(sysdate, lastpwdchangedate) ) AS pwdchangegap,
		         registerday, idle, email, mobile, address, detail_address, birthday, gender
		  from tbl_member 
		  where status = 1 and userid = #{id} and pw = #{pw}
		) M 
		CROSS JOIN 
		( select trunc( months_between(sysdate, max(logindate)) ) as lastlogingap 
		  from tbl_member_loginhistory 
		  where fk_userid = #{id} ) H
	</select>
	
	
	<!-- tbl_member 테이블의 idle 컬럼의 값을 1로 변경하기 -->
	<update id="updateMemberIdle" parameterType="HashMap">
		update tbl_member set idle = 1
		where userid = #{id}
	</update>
	
	
	<!-- tbl_member_loginhistory 테이블에 로그인 기록 입력하기 -->
	<insert id="insert_member_loginhistory" parameterType="HashMap">
		insert into tbl_member_loginhistory (fk_userid, logindate, clientip)
		values(#{id}, default, #{clientip})
	</insert>
	
	
	<!-- 로그인 처리하기(업체회원) -->
	<select id="getLoginCompanyMember" parameterType="HashMap" resultType="com.spring.app.trip.domain.CompanyVO">
		SELECT companyid, company_name, pwdchangegap,
		       NVL(lastlogingap, trunc(months_between(sysdate, registerday))) AS lastlogingap, 
		       idle, email, mobile
		FROM 
		( select companyid, company_name,
		         trunc( months_between(sysdate, lastpwdchangedate) ) AS pwdchangegap,
		         registerday, idle, email, mobile
		  from tbl_company
		  where status = 1 and companyid = #{id} and pw = #{pw}
		) M 
		CROSS JOIN 
		( select trunc( months_between(sysdate, max(logindate)) ) as lastlogingap 
		  from tbl_company_loginhistory 
		  where fk_companyid = #{id} ) H
	</select>
	
	
	<!-- tbl_company 테이블의 idle 컬럼의 값을 1로 변경하기 -->
	<update id="updateCompanyIdle" parameterType="HashMap">
		update tbl_company set idle = 1
		where companyid = #{id}
	</update>
	
	
	<!-- tbl_company_loginhistory 테이블에 로그인 기록 입력하기 -->
	<insert id="insert_company_loginhistory" parameterType="HashMap">
		insert into tbl_company_loginhistory (fk_companyid, logindate, clientip)
		values(#{id}, default, #{clientip})
	</insert>
	
	
	<!-- 아이디찾기 처리하기 (일반회원, 관리자) -->
	<resultMap type="HashMap" id="memberFindInfo">
		<result property="userid" column="userid" javaType="String" />
		<result property="user_name" column="user_name" javaType="String" />
	</resultMap>
	
	<select id="memberIdFind" parameterType="HashMap" resultMap="memberFindInfo">
		select userid, user_name
		from tbl_member
		where user_name = #{name} and email = #{email}
	</select>
	
	
	<!-- 아이디찾기 처리하기 (업체회원) -->
	<resultMap type="HashMap" id="companyFindInfo">
		<result property="companyid" column="companyid" javaType="String" />
		<result property="company_name" column="company_name" javaType="String" />
	</resultMap>
	
	<select id="companyIdFind" parameterType="HashMap" resultMap="companyFindInfo">
		select companyid, company_name
		from tbl_company
		where company_name = #{name} and email = #{email}
	</select>
	
	
	<!-- 사용자가 존재하는지 확인하기 (일반회원, 관리자) -->
	<select id="isMemberExist" parameterType="HashMap" resultType="String">
		select userid
		from tbl_member
		where userid = #{id} and email = #{email}
	</select>
	
	<!-- 사용자가 존재하는지 확인하기 (업체회원) -->
	<select id="isCompanyExist" parameterType="HashMap" resultType="String">
		select companyid
		from tbl_company
		where companyid = #{id} and email = #{email}
	</select>
	
	
	<!-- 비밀번호 변경 (일반회원, 관리자) -->
	<update id="memberPwUpdate" parameterType="HashMap">
		update tbl_member set pw = #{new_pw}, lastpwdchangedate = sysdate
		where userid = #{id}
	</update>
	
	<!-- 비밀번호 변경 (업체회원) -->
	<update id="companyPwUpdate" parameterType="HashMap">
		update tbl_company set pw = #{new_pw}, lastpwdchangedate = sysdate
		where companyid = #{id}
	</update>
	
	
	<!-- 맛집등록 - 일련번호 채번해오기 -->
	<select id="getCommonSeq" resultType="String">
		select SEQ_COMMON.nextval AS food_store_code
		from dual
	</select>
	
	
	<!-- === 데이터베이스에 맛집 정보 insert 하기 === -->
	<insert id="foodstoreRegister" parameterType="com.spring.app.trip.domain.FoodstoreVO">
		insert into tbl_food_store(food_store_code, food_category, local_status, food_name, food_content, food_businesshours, food_mobile, food_address, food_main_img, filename, orgfilename, filesize)
		values(#{food_store_code}, #{food_category}, #{local_status}, #{food_name}, #{food_content}, #{food_businesshours}, #{food_mobile}, #{food_address}, #{fileName}, #{fileName}, #{orgFilename}, #{fileSize})
	</insert>
	
	
	<!-- tbl_food_add_img 테이블에 추가이미지 파일명 insert 하기 -->
	<insert id="insert_food_add_img" parameterType="HashMap">
		insert into tbl_food_add_img(food_add_code, fk_food_store_code, food_add_img)
		values(seq_foodaddimg.nextval, #{fk_food_store_code}, #{food_add_img})
	</insert>
	
	
	<!-- 기존 비밀번호와 값이 일치한지 비교하기 (일반회원, 관리자) -->
	<select id="isSamePwMember" parameterType="HashMap" resultType="String">
		select pw
		from tbl_member
		where userid = #{id} and pw = #{new_pw}
	</select>
	
	
	<!-- 기존 비밀번호와 값이 일치한지 비교하기 (업체회원) -->
	<select id="isSamePwCompany" parameterType="HashMap" resultType="String">
		select pw
		from tbl_company
		where companyid = #{id} and pw = #{new_pw}
	</select>
	
	
	<!-- 기존의 로그인 기록 삭제하기 (일반회원, 관리자) -->
	<delete id="deleteMemberLoginHistory" parameterType="String">
		delete from tbl_member_loginhistory
		where fk_userid = #{id}
	</delete>
	
	
	<!-- 기존의 로그인 기록 삭제하기 (업체회원) -->
	<delete id="deleteCompanyLoginHistory" parameterType="String">
		delete from tbl_company_loginhistory
		where fk_companyid = #{id}
	</delete>
	
	
	<!-- idle을 0으로 변경하기 (일반회원, 관리자) -->
	<update id="memberIdleUpdate" parameterType="String">
		update tbl_member set idle = 0
		where userid = #{id}
	</update>
	
	
	<!-- idle을 0으로 변경하기 (업체회원) -->
	<update id="companyIdleUpdate" parameterType="String">
		update tbl_company set idle = 0
		where companyid = #{id}
	</update>
	
	
	<!-- 비밀번호 변경 날짜(lastpwdchangedate)를 현재 날짜로 변경하기 (일반회원, 관리자) -->
	<update id="updateMemberPwdChangeDate" parameterType="String">
		update tbl_member set lastpwdchangedate = sysdate
		where userid = #{id}
	</update>
	
	
	<!-- 비밀번호 변경 날짜(lastpwdchangedate)를 현재 날짜로 변경하기 (업체회원) -->
	<update id="updateCompanyPwdChangeDate" parameterType="String">
		update tbl_company set lastpwdchangedate = sysdate
		where companyid = #{id}
	</update>
	
	
	<!-- 커뮤니티 자유게시판 리스트 조회하기 -->
	<select id="getFreeBoardList" resultType="">
	</select>
	
	
	<!-- 커뮤니티 글 등록 처리하기 -->
	<insert id="addBoard" parameterType="com.spring.app.trip.domain.BoardVO">
		insert into tbl_board(seq, fk_userid, name, subject, content, pw, category)
		values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, #{category})
	</insert>
	
</mapper>
